{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Instrument synergy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The purpose of this notebook is to prototype support for multiple instruments operating on the same signal incident at Earth. The instruments may have different wavebands and the data may or may not be phase resolved for each instrument."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The unexecuted notebook for this tutorial may be found in a GitHub repository *together* with the necessary files which due to size are not included in the X-PSI respository:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "``` bash\n",
    "git clone https://github.com/ThomasEdwardRiley/xpsi_workshop.git </path/to/clone>\n",
    "\n",
    "cd </path/to/clone>/tutorials/v0.5/\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can use the default atmosphere extension module ``xpsi/surface_radiation_field/archive/hot/blackbody.pyx``. To run this tutorial, you should therefore be able to simply use the default extensions that are automatically compiled when X-PSI is installed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/=============================================\\\n",
      "| X-PSI: X-ray Pulse Simulation and Inference |\n",
      "|---------------------------------------------|\n",
      "|                Version: 0.5.2               |\n",
      "|---------------------------------------------|\n",
      "|  https://thomasedwardriley.github.io/xpsi/  |\n",
      "\\=============================================/\n",
      "\n",
      "Imported GetDist version: 0.3.1\n",
      "Imported nestcheck version: 0.2.0\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "from __future__ import print_function, division\n",
    "\n",
    "import os\n",
    "import numpy as np\n",
    "import math\n",
    "import time\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "from matplotlib import rcParams\n",
    "from matplotlib.ticker import MultipleLocator, AutoLocator, AutoMinorLocator\n",
    "from matplotlib import gridspec\n",
    "from matplotlib import cm\n",
    "\n",
    "import xpsi\n",
    "\n",
    "from xpsi.global_imports import _c, _G, _M_s, _dpr, gravradius, _csq, _km, _M_s, _2pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Telescope(object):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "NICER = Telescope()\n",
    "XMM = Telescope() # fabricated toy that we'll just pretend is XMM as a placeholder!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Likelihood"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us load a synthetic data set that we generated in advance, and know the fictitious exposure time for."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting channels for event data...\n",
      "Channels set.\n"
     ]
    }
   ],
   "source": [
    "obs_settings = dict(counts=np.loadtxt('data/NICER_realisation.dat', dtype=np.double),\n",
    "                    channels=np.arange(20, 201),\n",
    "                    phases=np.linspace(0.0, 1.0, 33),\n",
    "                    first=0,last=180,\n",
    "                    exposure_time=984307.6661)\n",
    "\n",
    "NICER.data = xpsi.Data(**obs_settings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting channels for event data...\n",
      "Channels set.\n"
     ]
    }
   ],
   "source": [
    "obs_settings = dict(counts=np.loadtxt('data/XMM_realisation.dat', dtype=np.double).reshape(-1,1),\n",
    "                    channels=np.arange(20, 201),\n",
    "                    phases=np.array([0.0, 1.0]),\n",
    "                    first=0,last=180,\n",
    "                    exposure_time=1818434.247359)\n",
    "\n",
    "XMM.data = xpsi.Data(**obs_settings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "rcParams['text.usetex'] = False\n",
    "rcParams['font.size'] = 14.0\n",
    "\n",
    "def veneer(x, y, axes, lw=1.0, length=8):\n",
    "    \"\"\" Make the plots a little more aesthetically pleasing. \"\"\"\n",
    "    if x is not None:\n",
    "        if x[1] is not None:\n",
    "            axes.xaxis.set_major_locator(MultipleLocator(x[1]))\n",
    "        if x[0] is not None:\n",
    "            axes.xaxis.set_minor_locator(MultipleLocator(x[0]))\n",
    "    else:\n",
    "        axes.xaxis.set_major_locator(AutoLocator())\n",
    "        axes.xaxis.set_minor_locator(AutoMinorLocator())\n",
    "        \n",
    "    if y is not None:\n",
    "        if y[1] is not None:\n",
    "            axes.yaxis.set_major_locator(MultipleLocator(y[1]))\n",
    "        if y[0] is not None:\n",
    "            axes.yaxis.set_minor_locator(MultipleLocator(y[0]))\n",
    "    else:\n",
    "        axes.yaxis.set_major_locator(AutoLocator())\n",
    "        axes.yaxis.set_minor_locator(AutoMinorLocator())\n",
    "        \n",
    "    axes.tick_params(which='major', colors='black', length=length, width=lw)\n",
    "    axes.tick_params(which='minor', colors='black', length=int(length/2), width=lw)\n",
    "    plt.setp(axes.spines.values(), linewidth=lw, color='black')\n",
    "\n",
    "def plot_one_pulse(pulse, x, data, label=r'Counts'):\n",
    "    \"\"\" Plot a pulse resolved over a single rotational cycle. \"\"\"\n",
    "    \n",
    "    fig = plt.figure(figsize = (7,7))\n",
    "\n",
    "    gs = gridspec.GridSpec(1, 2, width_ratios=[50,1])\n",
    "    ax = plt.subplot(gs[0])\n",
    "    ax_cb = plt.subplot(gs[1])\n",
    "\n",
    "    profile = ax.pcolormesh(x,\n",
    "                             data.channels,\n",
    "                             pulse,\n",
    "                             cmap = cm.magma,\n",
    "                             linewidth = 0,\n",
    "                             rasterized = True)\n",
    "\n",
    "    profile.set_edgecolor('face')\n",
    "\n",
    "    ax.set_xlim([0.0, 1.0])\n",
    "    ax.set_yscale('log')\n",
    "    ax.set_ylabel(r'Channel')\n",
    "    ax.set_xlabel(r'Phase')\n",
    "\n",
    "    cb = plt.colorbar(profile,\n",
    "                      cax = ax_cb)\n",
    "\n",
    "    cb.set_label(label=label, labelpad=25)\n",
    "    cb.solids.set_edgecolor('face')\n",
    "\n",
    "    veneer((0.05, 0.2), (None, None), ax)\n",
    "\n",
    "    plt.subplots_adjust(wspace = 0.025)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now for the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_one_pulse(NICER.data.counts, NICER.data.phases, NICER.data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (10,10))\n",
    "\n",
    "ax = fig.add_subplot(111)\n",
    "veneer((5, 25), (None,None), ax)\n",
    "\n",
    "ax.plot(XMM.data.counts, 'k-', ls='steps', label='XMM')\n",
    "ax.plot(np.sum(NICER.data.counts, axis=1), 'r-', ls='steps', label='NICER')\n",
    "\n",
    "ax.legend()\n",
    "\n",
    "ax.set_yscale('log')\n",
    "ax.set_ylabel('Counts')\n",
    "_ = ax.set_xlabel('Channel')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Instrument"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We require a model instrument object to transform incident specific flux signals into a form which enters directly in the sampling distribution of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CustomInstrument(xpsi.Instrument):\n",
    "    \"\"\" A model of the NICER telescope response. \"\"\"\n",
    "    \n",
    "    def __call__(self, signal, *args):\n",
    "        \"\"\" Overwrite base just to show it is possible.\n",
    "        \n",
    "        We loaded only a submatrix of the total instrument response\n",
    "        matrix into memory, so here we can simplify the method in the\n",
    "        base class.\n",
    "        \n",
    "        \"\"\"\n",
    "\n",
    "        matrix = self.construct_matrix()\n",
    "\n",
    "        self._folded_signal = np.dot(matrix, signal)\n",
    "\n",
    "        return self._folded_signal\n",
    "\n",
    "    @classmethod\n",
    "    def from_response_files(cls, ARF, RMF, max_input, min_input=0,\n",
    "                            channel_edges=None, translate_edges=None, scaling=None):\n",
    "        \"\"\" Constructor which converts response files into :class:`numpy.ndarray`s.\n",
    "        :param str ARF: Path to ARF which is compatible with\n",
    "                                :func:`numpy.loadtxt`.\n",
    "        :param str RMF: Path to RMF which is compatible with\n",
    "                                :func:`numpy.loadtxt`.\n",
    "        :param str channel_edges: Optional path to edges which is compatible with\n",
    "                                  :func:`numpy.loadtxt`.\n",
    "        \"\"\"\n",
    "\n",
    "        if min_input != 0:\n",
    "            min_input = int(min_input)\n",
    "\n",
    "        max_input = int(max_input)\n",
    "\n",
    "        try:\n",
    "            ARF = np.loadtxt(ARF, dtype=np.double, skiprows=3)\n",
    "            RMF = np.loadtxt(RMF, dtype=np.double)\n",
    "            if channel_edges:\n",
    "                channel_edges = np.loadtxt(channel_edges, dtype=np.double, skiprows=3)[:,1:]\n",
    "        except:\n",
    "            print('A file could not be loaded.')\n",
    "            raise\n",
    "            \n",
    "        if scaling is not None:\n",
    "            ARF[:,3] *= scaling\n",
    "            \n",
    "        matrix = np.ascontiguousarray(RMF[min_input:max_input,20:201].T, dtype=np.double)\n",
    "\n",
    "        edges = np.zeros(ARF[min_input:max_input,3].shape[0]+1, dtype=np.double)\n",
    "\n",
    "        edges[0] = ARF[min_input,1]; edges[1:] = ARF[min_input:max_input,2]\n",
    "\n",
    "        for i in range(matrix.shape[0]):\n",
    "            matrix[i,:] *= ARF[min_input:max_input,3]\n",
    "\n",
    "        channels = np.arange(20, 201)\n",
    "        \n",
    "        if translate_edges is not None:\n",
    "            edges += translate_edges\n",
    "\n",
    "        return cls(matrix, edges, channels, channel_edges[20:202,-2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's construct an instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting channels for loaded instrument response (sub)matrix...\n",
      "Channels set.\n"
     ]
    }
   ],
   "source": [
    "NICER.instrument = CustomInstrument.from_response_files(ARF = '../../examples/model_data/nicer_v1.01_arf.txt',\n",
    "                                         RMF = '../../examples/model_data/nicer_v1.01_rmf_matrix.txt',\n",
    "                                         max_input = 500,\n",
    "                                         min_input = 0,\n",
    "                                         channel_edges = '../../examples/model_data/nicer_v1.01_rmf_energymap.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting channels for loaded instrument response (sub)matrix...\n",
      "Channels set.\n"
     ]
    }
   ],
   "source": [
    "XMM.instrument = CustomInstrument.from_response_files(ARF = '../../examples/model_data/nicer_v1.01_arf.txt',\n",
    "                                       scaling = 0.5,\n",
    "                                       RMF = '../../examples/model_data/nicer_v1.01_rmf_matrix.txt',\n",
    "                                       max_input = 500,\n",
    "                                       min_input = 0,\n",
    "                                       channel_edges = '../../examples/model_data/nicer_v1.01_rmf_energymap.txt',\n",
    "                                       translate_edges = 0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The NICER ``v1.01`` response matrix:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (14,7))\n",
    "\n",
    "ax = fig.add_subplot(111)\n",
    "veneer((25, 100), (10, 50), ax)\n",
    "\n",
    "_ = ax.imshow(NICER.instrument.matrix,\n",
    "              cmap = cm.viridis,\n",
    "              rasterized = True)\n",
    "\n",
    "ax.set_ylabel('Channel $-\\;20$')\n",
    "_ = ax.set_xlabel('Energy interval')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summed over channel subset $[20,200]$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (10,10))\n",
    "\n",
    "ax = fig.add_subplot(111)\n",
    "veneer((0.1, 0.5), (50,250), ax)\n",
    "\n",
    "ax.plot((NICER.instrument.energy_edges[:-1] + NICER.instrument.energy_edges[1:])/2.0,\n",
    "        np.sum(NICER.instrument.matrix, axis=0), 'k-')\n",
    "\n",
    "ax.plot((XMM.instrument.energy_edges[:-1] + XMM.instrument.energy_edges[1:])/2.0,\n",
    "        np.sum(XMM.instrument.matrix, axis=0), 'r-')\n",
    "\n",
    "ax.set_ylabel('Effective area [cm$^{-2}$]')\n",
    "_ = ax.set_xlabel('Energy [keV]')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Signal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from xpsi.likelihoods.default_background_marginalisation import eval_marginal_likelihood\n",
    "from xpsi.likelihoods.default_background_marginalisation import precomputation\n",
    "\n",
    "class CustomSignal(xpsi.Signal):\n",
    "    \"\"\" A custom calculation of the logarithm of the likelihood.\n",
    "    We extend the :class:`xpsi.Signal.Signal` class to make it callable.\n",
    "    We overwrite the body of the __call__ method. The docstring for the\n",
    "    abstract method is copied.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, workspace_intervals = 1000, epsabs = 0, epsrel = 1.0e-8,\n",
    "                 epsilon = 1.0e-3, sigmas = 10.0, support = None, *args, **kwargs):\n",
    "        \"\"\" Perform precomputation. \"\"\"\n",
    "\n",
    "        super(CustomSignal, self).__init__(*args, **kwargs)\n",
    "\n",
    "        try:\n",
    "            self._precomp = precomputation(self._data.counts.astype(np.int32))\n",
    "        except AttributeError:\n",
    "            print('Warning: No data... can synthesise data but cannot evaluate a '\n",
    "                  'likelihood function.')\n",
    "        else:\n",
    "            self._workspace_intervals = workspace_intervals\n",
    "            self._epsabs = epsabs\n",
    "            self._epsrel = epsrel\n",
    "            self._epsilon = epsilon\n",
    "            self._sigmas = sigmas\n",
    "            if support is not None:\n",
    "                self._support = support\n",
    "            else:\n",
    "                self._support = -1.0 * np.ones((self._data.counts.shape[0],2))\n",
    "                self._support[:,0] = 0.0\n",
    "        \n",
    "    @property\n",
    "    def support(self):\n",
    "        return self._support\n",
    "\n",
    "    @support.setter\n",
    "    def support(self, obj):\n",
    "        self._support = obj\n",
    "\n",
    "    def __call__(self, **kwargs):\n",
    "        self.loglikelihood, self.expected_counts, self.background_signal = \\\n",
    "                eval_marginal_likelihood(self._data.exposure_time,\n",
    "                                          self._data.phases,\n",
    "                                          self._data.counts,\n",
    "                                          self._signals,\n",
    "                                          self._phases,\n",
    "                                          self._shifts,\n",
    "                                          self._precomp,\n",
    "                                          self._support,\n",
    "                                          self._workspace_intervals,\n",
    "                                          self._epsabs,\n",
    "                                          self._epsrel,\n",
    "                                          self._epsilon,\n",
    "                                          self._sigmas,\n",
    "                                          kwargs.get('llzero'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that if we need an additional overall phase shift parameter for additional instruments whose recorded data are phase resolved, then it could be passed to the subclass above for the signal associated with a given telescope."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "NICER.signal = CustomSignal(data = NICER.data,\n",
    "                              instrument = NICER.instrument,\n",
    "                              background = None,\n",
    "                              interstellar = None,\n",
    "                              workspace_intervals = 1000,\n",
    "                              epsrel = 1.0e-8,\n",
    "                              epsilon = 1.0e-3,\n",
    "                              sigmas = 10.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "XMM.signal = CustomSignal(data = XMM.data,\n",
    "                               instrument = XMM.instrument,\n",
    "                               background = None,\n",
    "                               interstellar = None,\n",
    "                               support = None,\n",
    "                               workspace_intervals = 1000,\n",
    "                               epsrel = 1.0e-8,\n",
    "                               epsilon = 1.0e-3,\n",
    "                               sigmas = 10.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Star"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Configuring default bounds with fixed spin...\n",
      "Creating parameter:\n",
      "    > Named \"frequency\" with fixed value 3.000e+02.\n",
      "    > Spin frequency [Hz].\n",
      "\n",
      "\n",
      "Creating parameter:\n",
      "    > Named \"mass\" with bounds [1.000e+00, 3.000e+00].\n",
      "    > Gravitational mass [solar masses].\n",
      "\n",
      "\n",
      "Creating parameter:\n",
      "    > Named \"radius\" with bounds [1.477e+00, 1.600e+01].\n",
      "    > Coordinate equatorial radius [km].\n",
      "\n",
      "\n",
      "Creating parameter:\n",
      "    > Named \"distance\" with bounds [5.000e-02, 2.000e+00].\n",
      "    > Earth distance [kpc].\n",
      "\n",
      "\n",
      "Creating parameter:\n",
      "    > Named \"cos_inclination\" with bounds [0.000e+00, 1.000e+00].\n",
      "    > Cosine of Earth inclination to rotation axis.\n",
      "\n",
      "\n",
      "Spacetime configured.\n"
     ]
    }
   ],
   "source": [
    "spacetime = xpsi.Spacetime.fixed_spin(300.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating parameter:\n",
      "    > Named \"super_colatitude\" with bounds [0.000e+00, 3.142e+00].\n",
      "    > The colatitude of the centre of the superseding region [radians].\n",
      "\n",
      "\n",
      "Creating parameter:\n",
      "    > Named \"super_radius\" with bounds [0.000e+00, 1.571e+00].\n",
      "    > The angular radius of the (circular) superseding region [radians].\n",
      "\n",
      "\n",
      "Creating parameter:\n",
      "    > Named \"phase_shift\" with bounds [-5.000e-01, 5.000e-01].\n",
      "    > The phase of the hot region, a periodic parameter [cycles].\n",
      "\n",
      "\n",
      "Creating parameter:\n",
      "    > Named \"super_temperature\" with bounds [3.000e+00, 7.000e+00].\n",
      "    > log10(superseding region effective temperature [K]).\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "bounds = dict(super_colatitude = (None, None),\n",
    "              super_radius = (None, None),\n",
    "              phase_shift = (-0.5, 0.5),\n",
    "              super_temperature = (None, None))\n",
    "\n",
    "# a simple circular, simply-connected spot\n",
    "primary = xpsi.HotRegion(bounds=bounds,\n",
    "                            values={}, # no initial values and no derived/fixed\n",
    "                            symmetry=True,\n",
    "                            omit=False,\n",
    "                            cede=False,\n",
    "                            concentric=False,\n",
    "                            sqrt_num_cells=32,\n",
    "                            min_sqrt_num_cells=10,\n",
    "                            max_sqrt_num_cells=64,\n",
    "                            num_leaves=100,\n",
    "                            num_rays=200,\n",
    "                            do_fast=False,\n",
    "                            prefix='p') # unique prefix needed because >1 instance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating parameter:\n",
      "    > Named \"super_colatitude\" with bounds [0.000e+00, 3.142e+00].\n",
      "    > The colatitude of the centre of the superseding region [radians].\n",
      "\n",
      "\n",
      "Creating parameter:\n",
      "    > Named \"super_radius\" with bounds [0.000e+00, 1.571e+00].\n",
      "    > The angular radius of the (circular) superseding region [radians].\n",
      "\n",
      "\n",
      "Creating parameter:\n",
      "    > Named \"phase_shift\" with bounds [-5.000e-01, 5.000e-01].\n",
      "    > The phase of the hot region, a periodic parameter [cycles].\n",
      "\n",
      "\n",
      "Creating parameter:\n",
      "    > Named \"super_temperature\" that is derived from ulterior variables.\n",
      "    > log10(superseding region effective temperature [K]).\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "class derive(xpsi.Derive):\n",
    "    def __init__(self):\n",
    "        \"\"\"\n",
    "        We can pass a reference to the primary here instead\n",
    "        and store it as an attribute if there is risk of\n",
    "        the global variable changing.\n",
    "        \n",
    "        This callable can for this simple case also be\n",
    "        achieved merely with a function instead of a magic\n",
    "        method associated with a class.\n",
    "        \"\"\"\n",
    "        pass\n",
    "\n",
    "    def __call__(self, boundto, caller = None):\n",
    "        # one way to get the required reference\n",
    "        global primary # unnecessary, but for clarity\n",
    "        return primary['super_temperature'] - 0.2\n",
    "    \n",
    "bounds['super_temperature'] = None # declare fixed/derived variable\n",
    "\n",
    "secondary = xpsi.HotRegion(bounds=bounds, # can otherwise use same bounds\n",
    "                              values={'super_temperature': derive()}, # create a callable value\n",
    "                              symmetry=True,\n",
    "                              omit=False,\n",
    "                              cede=False,\n",
    "                              concentric=False,\n",
    "                              sqrt_num_cells=32,\n",
    "                              min_sqrt_num_cells=10,\n",
    "                              max_sqrt_num_cells=100,\n",
    "                              num_leaves=100,\n",
    "                              num_rays=200,\n",
    "                              do_fast=False,\n",
    "                              is_antiphased=True,\n",
    "                              prefix='s') # unique prefix needed because >1 instance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from xpsi import HotRegions\n",
    "\n",
    "hot = HotRegions((primary, secondary))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CustomPhotosphere(xpsi.Photosphere):\n",
    "    \"\"\" Implement method for imaging.\"\"\"\n",
    "    \n",
    "    def _global_variables(self):\n",
    "    \n",
    "        return np.array([self['p__super_colatitude'],\n",
    "                          self['p__phase_shift'] * _2pi,\n",
    "                          self['p__super_radius'],\n",
    "                          self['p__super_temperature'],\n",
    "                          self['s__super_colatitude'],\n",
    "                          (self['s__phase_shift'] + 0.5) * _2pi,\n",
    "                          self['s__super_radius'],\n",
    "                          self.hot.objects[1]['s__super_temperature']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating parameter:\n",
      "    > Named \"mode_frequency\" with fixed value 3.000e+02.\n",
      "    > Coordinate frequency of the mode of radiative asymmetry in the\n",
      "photosphere that is assumed to generate the pulsed signal [Hz].\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "photosphere = CustomPhotosphere(hot = hot, elsewhere = None,\n",
    "                                values=dict(mode_frequency = spacetime['frequency']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "star = xpsi.Star(spacetime = spacetime, photospheres = photosphere)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "likelihood = xpsi.Likelihood(star = star, signals = [NICER.signal, XMM.signal],\n",
    "                             threads = 1, externally_updated = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The instrument wavebands exhibit a high degree of overlap. The energies at which we compute incident specific flux signals are based on the union of wavebands, distributed logarithmically:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(8,8))\n",
    "plt.plot(XMM.signal.energies, 'kx')\n",
    "ax = plt.gca()\n",
    "veneer((5,20),(0.2,1.0),ax)\n",
    "ax.set_xlabel('Index')\n",
    "_ = ax.set_ylabel('Energy [keV]')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a simple, non-adaptive protocol to ensure that signals are not computed at very nearby energies for multiple telescopes, resulting in overhead."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's call the ``likelihood`` object with the true model parameter values that we injected to generate the synthetic data rendered above, omitting background parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ll = -29322.45504882; time = 0.610\n"
     ]
    }
   ],
   "source": [
    "p = [1.4,\n",
    "     12.5,\n",
    "     0.2,\n",
    "     math.cos(1.25),\n",
    "     0.0,\n",
    "     1.0,\n",
    "     0.075,\n",
    "     6.2,\n",
    "     0.025,\n",
    "     math.pi - 1.0,\n",
    "     0.2]\n",
    "\n",
    "t = time.time()\n",
    "ll = likelihood(p, force=True) # force if you want to clear parameter value caches\n",
    "\n",
    "print('ll = %.8f; time = %.3f' % (ll, time.time() - t))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-26713.614013114762"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NICER.signal.loglikelihood # check NICER ll ~ -26713.6136 ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2608.8410357102216"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "XMM.signal.loglikelihood # check XMM ll ~ -2608.8410 ?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's fabricate some rough prior information as the constrained support of the background parameters for XMM:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "support = np.zeros((181, 2))\n",
    "support[:,0] = XMM.signal.background_signal - 5.0 * np.sqrt(XMM.signal.background_signal)\n",
    "support[:,1] = XMM.signal.background_signal + 5.0 * np.sqrt(XMM.signal.background_signal)\n",
    "support /= XMM.data.exposure_time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "XMM.signal.support = support"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "ll = likelihood(p, force=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's confirm that the XMM background-marginalised likelihood did indeed change:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2610.1212043019414"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "XMM.signal.loglikelihood"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The background-marginalised likelihood function has the following form. Subscripts N denote NICER, whilst subscripts X denote XMM.\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "p(d_{\\rm X}, d_{\\rm N}, \\{b_{\\rm X}\\} \\,|\\, s)\n",
    "    \\propto\n",
    "    &\n",
    "    \\underbrace{\\mathop{\\int}_{\\{0\\}}^{\\{\\mathcal{U}_{\\rm N}\\}}\n",
    "    p(d_{\\rm N} \\,|\\, s, \\{\\mathbb{E}[b_{\\rm N}]\\}, \\texttt{NICER})\n",
    "    d\\{\\mathbb{E}[b_{\\rm N}]\\}}_{\\rm exp( \\texttt{NICER.signal.loglikelihood} )}\\\\\n",
    "    &\n",
    "    \\times\\underbrace{\\mathop{\\int}_{\\{0\\}}^{\\{\\mathcal{U}_{X}\\}}\n",
    "    p(d_{\\rm X} \\,|\\, s, \\{\\mathbb{E}[b_{\\rm X}]\\}, \\texttt{XMM})\n",
    "    p(\\{\\mathbb{E}[b_{\\rm X}]\\} \\,|\\, \\{b_{\\rm X}\\})d\\{\\mathbb{E}[b_{\\rm X}]\\}}_{\\rm exp( \\texttt{XMM.signal.loglikelihood} )}.\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "The term $p(\\{\\mathbb{E}[b_{\\rm X}]\\} \\,|\\, \\{b_{\\rm X}\\})$ truncates the integral over XMM channel-by-channel background count rate variables to an interval $[a,b]$ in each channel, where $a,b\\in\\mathbb{R}^{+}$. This is the joint prior support of the variables $\\{\\mathbb{E}[b_{\\rm X}]\\}$ rendered in the spectral plot below. The form of the prior density $p(\\{\\mathbb{E}[b_{\\rm X}]\\} \\,|\\, \\{b_{\\rm X}\\})$ is flat on this interval for each channel. This is a simplifying approximation to the probability of the background data $\\{b_{\\rm X}\\}$ given the variables $\\{\\mathbb{E}[b_{\\rm X}]\\}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "def plot_spectrum():\n",
    "\n",
    "    fig = plt.figure(figsize = (10,10))\n",
    "\n",
    "    ax = fig.add_subplot(111)\n",
    "    veneer((5, 25), (None,None), ax)\n",
    "\n",
    "    ax.fill_between(np.arange(support.shape[0]),\n",
    "                    support[:,0]*XMM.data.exposure_time,\n",
    "                    support[:,1]*XMM.data.exposure_time,\n",
    "                    step = 'pre',\n",
    "                    color = 'k',\n",
    "                    alpha = 0.5,\n",
    "                    label = 'background support')\n",
    "\n",
    "    ax.plot(XMM.signal.background_signal, 'b-', ls='steps', label='MCL background')\n",
    "    ax.plot(XMM.signal.expected_counts, 'k-', ls='steps', label='MCL counts given support', lw=5.0)\n",
    "    ax.plot(XMM.data.counts, 'r-', ls='steps', label='XMM data')\n",
    "\n",
    "    ax.legend()\n",
    "\n",
    "    ax.set_yscale('log')\n",
    "    ax.set_ylabel('Counts')\n",
    "    _ = ax.set_xlabel('Channel')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The spectrum labelled *MCL counts given support* means the expected signal from the pulsar, plus the background count vector that maximises the conditional likelihood function given that pulsar signal, subject to the background vector existing in the prior support. The spectrum labelled *MCL background*, on the other hand, is the background vector that maximises the conditional likelihood function, but *not* subject to the prior support."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "likelihood['p__super_temperature'] = 6.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "likelihood.externally_updated = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-391362.7194516132"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "likelihood()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-321096.5505391409"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "XMM.signal.loglikelihood"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Synthesis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this notebook thus far we have not generated sythetic data. However, we did condition on synthetic data. Below we outline how that data was generated."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Background"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The background radiation field incident on the model instrument for the purpose of generating synthetic data was a time-invariant powerlaw spectrum, and was transformed into a count-rate in each output channel using the response matrix for synthetic data generation. We would reproduce this background here by writing a custom subclass as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CustomBackground(xpsi.Background):\n",
    "    \"\"\" The background injected to generate synthetic data. \"\"\"\n",
    "\n",
    "    def __init__(self, bounds=None, value=None):\n",
    "        \n",
    "        # first the parameters that are fundemental to this class\n",
    "        doc = \"\"\"\n",
    "        Powerlaw spectral index.\n",
    "        \"\"\"\n",
    "        index = xpsi.Parameter('powerlaw_index',\n",
    "                                strict_bounds = (-3.0, -1.01),\n",
    "                                bounds = bounds,\n",
    "                                doc = doc,\n",
    "                                symbol = r'$\\Gamma$',\n",
    "                                value = value,\n",
    "                                permit_prepend = False) # because to be shared by multiple objects\n",
    "        \n",
    "        super(CustomBackground, self).__init__(index)\n",
    "\n",
    "    def __call__(self, energy_edges, phases):\n",
    "        \"\"\" Evaluate the incident background field. \"\"\"\n",
    "        \n",
    "        G = self['powerlaw_index']\n",
    "\n",
    "        temp = np.zeros((energy_edges.shape[0] - 1, phases.shape[0]))\n",
    "\n",
    "        temp[:,0] = (energy_edges[1:]**(G + 1.0) - energy_edges[:-1]**(G + 1.0)) / (G + 1.0)\n",
    "\n",
    "        for i in range(phases.shape[0]):\n",
    "            temp[:,i] = temp[:,0]\n",
    "\n",
    "        self.background = temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating parameter:\n",
      "    > Named \"powerlaw_index\" with bounds [-3.000e+00, -1.010e+00].\n",
      "    > Powerlaw spectral index.\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "background = CustomBackground(bounds=(None, None)) # use strict bounds, but do not fix/derive"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use this same background signal, albeit with different normalisations, for both telescopes. This is simply to generate finite background contributions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data format"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are also in need of a simpler data object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SynthesiseData(xpsi.Data):\n",
    "    \"\"\" Custom data container to enable synthesis. \"\"\"\n",
    "    \n",
    "    def __init__(self, channels, phases, first, last):\n",
    "        self.channels = channels\n",
    "        self._phases = phases\n",
    "        \n",
    "        try:\n",
    "            self._first = int(first)\n",
    "            self._last = int(last)\n",
    "        except TypeError:\n",
    "            raise TypeError('The first and last channels must be integers.')\n",
    "        if self._first >= self._last:\n",
    "            raise ValueError('The first channel number must be lower than the '\n",
    "                             'the last channel number.')\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instantiate:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting channels for event data...\n",
      "Channels set.\n"
     ]
    }
   ],
   "source": [
    "NICER.synth = SynthesiseData(np.arange(20,201), np.linspace(0.0, 1.0, 33), 0, 180)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting channels for event data...\n",
      "Channels set.\n"
     ]
    }
   ],
   "source": [
    "XMM.synth = SynthesiseData(np.arange(20,201), np.array([0.0,1.0]), 0, 180)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Custom method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "from xpsi.tools.synthesise import synthesise_given_total_count_number as _synthesise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "def synthesise(self,\n",
    "               require_source_counts,\n",
    "               require_background_counts,\n",
    "               name='synthetic',\n",
    "               directory='./data',\n",
    "               **kwargs):\n",
    "        \"\"\" Synthesise data set.\n",
    "\n",
    "        \"\"\"\n",
    "        self._expected_counts, synthetic, _, _ = _synthesise(self._data.phases,\n",
    "                                            require_source_counts,\n",
    "                                            self._signals,\n",
    "                                            self._phases,\n",
    "                                            self._shifts,\n",
    "                                            require_background_counts,\n",
    "                                            self._background.registered_background)\n",
    "        try:\n",
    "            if not os.path.isdir(directory):\n",
    "                os.mkdir(directory)\n",
    "        except OSError:\n",
    "            print('Cannot create write directory.')\n",
    "            raise\n",
    "\n",
    "        np.savetxt(os.path.join(directory, name+'_realisation.dat'),\n",
    "                   synthetic,\n",
    "                   fmt = '%u')\n",
    "\n",
    "        self._write(self.expected_counts,\n",
    "                    filename = os.path.join(directory, name+'_expected_hreadable.dat'),\n",
    "                    fmt = '%.8e')\n",
    "\n",
    "        self._write(synthetic,\n",
    "                    filename = os.path.join(directory, name+'_realisation_hreadable.dat'),\n",
    "                    fmt = '%u')\n",
    "\n",
    "def _write(self, counts, filename, fmt):\n",
    "    \"\"\" Write to file in human readable format. \"\"\"\n",
    "\n",
    "    rows = len(self._data.phases) - 1\n",
    "    rows *= len(self._data.channels)\n",
    "\n",
    "    phases = self._data.phases[:-1]\n",
    "    array = np.zeros((rows, 3))\n",
    "\n",
    "    for i in range(counts.shape[0]):\n",
    "        for j in range(counts.shape[1]):\n",
    "            array[i*len(phases) + j,:] = self._data.channels[i], phases[j], counts[i,j]\n",
    "\n",
    "    np.savetxt(filename, array, fmt=['%u', '%.6f'] + [fmt])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "CustomSignal.synthesise = synthesise\n",
    "CustomSignal._write = _write"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now need to instantiate, and reconfigure the likelihood object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: No data... can synthesise data but cannot evaluate a likelihood function.\n",
      "Warning: No data... can synthesise data but cannot evaluate a likelihood function.\n"
     ]
    }
   ],
   "source": [
    "NICER.signal = CustomSignal(data = NICER.synth,\n",
    "                              instrument = NICER.instrument,\n",
    "                              background = background,\n",
    "                              interstellar = None,\n",
    "                              workspace_intervals = 1000,\n",
    "                              epsrel = 1.0e-8,\n",
    "                              epsilon = 1.0e-3,\n",
    "                              sigmas = 10.0,\n",
    "                              prefix='NICER')\n",
    "\n",
    "XMM.signal = CustomSignal(data = XMM.synth,\n",
    "                          instrument = XMM.instrument,\n",
    "                          background = background,\n",
    "                          interstellar = None,\n",
    "                          workspace_intervals = 1000,\n",
    "                          epsrel = 1.0e-8,\n",
    "                          epsilon = 1.0e-3,\n",
    "                          sigmas = 10.0,\n",
    "                          prefix='XMM')\n",
    "\n",
    "for h in hot.objects:\n",
    "    h.set_phases(num_leaves = 100)\n",
    "    \n",
    "likelihood = xpsi.Likelihood(star = star, signals = [NICER.signal, XMM.signal], threads=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Synthesise"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We proceed to synthesise. First we set an environment variable to seed the random number generator being called:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "env: GSL_RNG_SEED=0\n"
     ]
    }
   ],
   "source": [
    "%env GSL_RNG_SEED=0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check write path:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/thomas/xpsi/docs/source\r\n"
     ]
    }
   ],
   "source": [
    "!pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Free parameters\n",
       "---------------\n",
       "mass: Gravitational mass [solar masses].\n",
       "radius: Coordinate equatorial radius [km].\n",
       "distance: Earth distance [kpc].\n",
       "cos_inclination: Cosine of Earth inclination to rotation axis.\n",
       "p__phase_shift: The phase of the hot region, a periodic parameter [cycles].\n",
       "p__super_colatitude: The colatitude of the centre of the superseding region [radians].\n",
       "p__super_radius: The angular radius of the (circular) superseding region [radians].\n",
       "p__super_temperature: log10(superseding region effective temperature [K]).\n",
       "s__phase_shift: The phase of the hot region, a periodic parameter [cycles].\n",
       "s__super_colatitude: The colatitude of the centre of the superseding region [radians].\n",
       "s__super_radius: The angular radius of the (circular) superseding region [radians].\n",
       "powerlaw_index: Powerlaw spectral index."
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "likelihood"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exposure time: 984307.618376 [s]\n",
      "Background normalisation: 1.89127981e-05\n",
      "Exposure time: 1818434.247359 [s]\n",
      "Background normalisation: 2.21408314e-04\n"
     ]
    }
   ],
   "source": [
    "p = [1.4,\n",
    "     12.5,\n",
    "     0.2,\n",
    "     math.cos(1.25),\n",
    "     0.0,\n",
    "     1.0,\n",
    "     0.075,\n",
    "     6.2,\n",
    "     0.025,\n",
    "     math.pi - 1.0,\n",
    "     0.2,\n",
    "     -2.0]\n",
    "\n",
    "NICER_kwargs = dict(require_source_counts = 2.0e6,\n",
    "                      require_background_counts = 2.0e6,\n",
    "                      name = 'new_NICER',\n",
    "                      directory = './data')\n",
    "\n",
    "XMM_kwargs = dict(require_source_counts = 1.0e6,\n",
    "                      require_background_counts = 5.0e5,\n",
    "                      name = 'new_XMM',\n",
    "                      directory = './data')\n",
    "\n",
    "likelihood.synthesise(p,\n",
    "                      force = True,\n",
    "                      NICER = NICER_kwargs,\n",
    "                      XMM = XMM_kwargs) # SEED=0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that the normalisations, with units photons/s/cm^2/keV, are different because we require so many background counts. This detail is unimportant for this notebook, wherein we simply want some finite background contributions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_one_pulse(np.loadtxt('data/new_NICER_realisation.dat', dtype=np.double), NICER.data.phases, NICER.data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check we have generated the same count numbers, given the same seed and resolution settings:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff = NICER.data.counts - np.loadtxt('data/new_NICER_realisation.dat', dtype=np.double)\n",
    "(diff != 0.0).any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff = XMM.data.counts - np.loadtxt('data/new_XMM_realisation.dat', dtype=np.double).reshape(-1,1)\n",
    "(diff != 0.0).any()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
