/* Generated by Cython 0.28.5 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_5"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__hot
#define __PYX_HAVE_API__hot
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <math.h>
#include <stdio.h>
#include <sys/types.h>
#include <signal.h>
#include <sys/time.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "hot.pyx",
};

/*--- Type declarations ---*/
struct __pyx_t_7preload__preloaded;
typedef struct __pyx_t_7preload__preloaded __pyx_t_7preload__preloaded;

/* "preload.pxd":3
 * from libc.stdlib cimport malloc, free
 * 
 * ctypedef struct _preloaded:             # <<<<<<<<<<<<<<
 *     size_t ndims
 *     double *I
 */
struct __pyx_t_7preload__preloaded {
  size_t ndims;
  double *I;
  double **params;
  size_t *S;
  size_t *N;
  size_t *BLOCKS;
};
struct __pyx_t_3hot_ACCELERATE;
typedef struct __pyx_t_3hot_ACCELERATE __pyx_t_3hot_ACCELERATE;
struct __pyx_t_3hot_DATA;
typedef struct __pyx_t_3hot_DATA __pyx_t_3hot_DATA;

/* "hot.pyx":26
 * cdef int VERBOSE = 0
 * 
 * ctypedef struct ACCELERATE:             # <<<<<<<<<<<<<<
 *     size_t **BN                # base node for interpolation
 *     double **node_vals
 */
struct __pyx_t_3hot_ACCELERATE {
  size_t **BN;
  double **node_vals;
  double **SPACE;
  double **DIFF;
  double **INTENSITY_CACHE;
  double **VEC_CACHE;
};

/* "hot.pyx":39
 * # dynamically allocated memory, not shared by threads.
 * 
 * ctypedef struct DATA:             # <<<<<<<<<<<<<<
 *     const _preloaded *p
 *     ACCELERATE acc
 */
struct __pyx_t_3hot_DATA {
  __pyx_t_7preload__preloaded const *p;
  __pyx_t_3hot_ACCELERATE acc;
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'preload' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'posix.types' */

/* Module declarations from 'posix.signal' */

/* Module declarations from 'posix.time' */

/* Module declarations from 'hot' */
static int __pyx_v_3hot_SUCCESS;
static int __pyx_v_3hot_ERROR;
static double __pyx_v_3hot_erg;
static double __pyx_v_3hot_k_B;
static double __pyx_v_3hot_keV;
static double __pyx_v_3hot_k_B_over_keV;
static int __pyx_v_3hot_VERBOSE;
static struct timespec __pyx_v_3hot_ts;
static struct timespec __pyx_v_3hot_te;
#define __Pyx_MODULE_NAME "hot"
extern int __pyx_module_is_main_hot;
int __pyx_module_is_main_hot = 0;

/* Implementation of 'hot' */
static PyObject *__pyx_builtin_range;
static const char __pyx_k_k_B[] = "_k_B";
static const char __pyx_k_keV[] = "_keV";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_xpsi_global_imports[] = "xpsi.global_imports";
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_k_B;
static PyObject *__pyx_n_s_keV;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_xpsi_global_imports;
/* Late includes */

/* "hot.pyx":56
 * # ... the Cython language.
 * #----------------------------------------------------------------------->>>
 * cdef void* init_hot(size_t numThreads, const _preloaded *const preloaded) nogil:             # <<<<<<<<<<<<<<
 *     # This function must match the free management routine free_hot()
 *     # in terms of freeing dynamically allocated memory. This is entirely
 */

static void *__pyx_f_3hot_init_hot(size_t __pyx_v_numThreads, __pyx_t_7preload__preloaded const *const __pyx_v_preloaded) {
  __pyx_t_3hot_DATA *__pyx_v_D;
  size_t __pyx_v_T;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_k;
  size_t __pyx_v_l;
  size_t __pyx_v_m;
  double *__pyx_v_address;
  long __pyx_v_t_elapsed;
  void *__pyx_r;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;

  /* "hot.pyx":64
 *     # printf("inside init_hot()")
 * 
 *     clock_gettime(CLOCK_REALTIME, &ts)             # <<<<<<<<<<<<<<
 * 
 *     cdef DATA *D = <DATA*> malloc(sizeof(DATA))
 */
  (void)(clock_gettime(CLOCK_REALTIME, (&__pyx_v_3hot_ts)));

  /* "hot.pyx":66
 *     clock_gettime(CLOCK_REALTIME, &ts)
 * 
 *     cdef DATA *D = <DATA*> malloc(sizeof(DATA))             # <<<<<<<<<<<<<<
 *     D.p = preloaded
 * 
 */
  __pyx_v_D = ((__pyx_t_3hot_DATA *)malloc((sizeof(__pyx_t_3hot_DATA))));

  /* "hot.pyx":67
 * 
 *     cdef DATA *D = <DATA*> malloc(sizeof(DATA))
 *     D.p = preloaded             # <<<<<<<<<<<<<<
 * 
 *     # (1) These BLOCKS appear to be related to the number of interpolation
 */
  __pyx_v_D->p = __pyx_v_preloaded;

  /* "hot.pyx":79
 *     # By analogy, expand by one factor of four.
 * 
 *     D.p.BLOCKS[0] = 256             # <<<<<<<<<<<<<<
 *     D.p.BLOCKS[1] = 64
 *     D.p.BLOCKS[2] = 16
 */
  (__pyx_v_D->p->BLOCKS[0]) = 0x100;

  /* "hot.pyx":80
 * 
 *     D.p.BLOCKS[0] = 256
 *     D.p.BLOCKS[1] = 64             # <<<<<<<<<<<<<<
 *     D.p.BLOCKS[2] = 16
 *     D.p.BLOCKS[3] = 4
 */
  (__pyx_v_D->p->BLOCKS[1]) = 64;

  /* "hot.pyx":81
 *     D.p.BLOCKS[0] = 256
 *     D.p.BLOCKS[1] = 64
 *     D.p.BLOCKS[2] = 16             # <<<<<<<<<<<<<<
 *     D.p.BLOCKS[3] = 4
 * 
 */
  (__pyx_v_D->p->BLOCKS[2]) = 16;

  /* "hot.pyx":82
 *     D.p.BLOCKS[1] = 64
 *     D.p.BLOCKS[2] = 16
 *     D.p.BLOCKS[3] = 4             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_D->p->BLOCKS[3]) = 4;

  /* "hot.pyx":87
 *     cdef size_t T, i, j, k, l, m
 * 
 *     D.acc.BN = <size_t**> malloc(numThreads * sizeof(size_t*))             # <<<<<<<<<<<<<<
 *     D.acc.node_vals = <double**> malloc(numThreads * sizeof(double*))
 *     D.acc.SPACE = <double**> malloc(numThreads * sizeof(double*))
 */
  __pyx_v_D->acc.BN = ((size_t **)malloc((__pyx_v_numThreads * (sizeof(size_t *)))));

  /* "hot.pyx":88
 * 
 *     D.acc.BN = <size_t**> malloc(numThreads * sizeof(size_t*))
 *     D.acc.node_vals = <double**> malloc(numThreads * sizeof(double*))             # <<<<<<<<<<<<<<
 *     D.acc.SPACE = <double**> malloc(numThreads * sizeof(double*))
 *     D.acc.DIFF = <double**> malloc(numThreads * sizeof(double*))
 */
  __pyx_v_D->acc.node_vals = ((double **)malloc((__pyx_v_numThreads * (sizeof(double *)))));

  /* "hot.pyx":89
 *     D.acc.BN = <size_t**> malloc(numThreads * sizeof(size_t*))
 *     D.acc.node_vals = <double**> malloc(numThreads * sizeof(double*))
 *     D.acc.SPACE = <double**> malloc(numThreads * sizeof(double*))             # <<<<<<<<<<<<<<
 *     D.acc.DIFF = <double**> malloc(numThreads * sizeof(double*))
 *     D.acc.INTENSITY_CACHE = <double**> malloc(numThreads * sizeof(double*))
 */
  __pyx_v_D->acc.SPACE = ((double **)malloc((__pyx_v_numThreads * (sizeof(double *)))));

  /* "hot.pyx":90
 *     D.acc.node_vals = <double**> malloc(numThreads * sizeof(double*))
 *     D.acc.SPACE = <double**> malloc(numThreads * sizeof(double*))
 *     D.acc.DIFF = <double**> malloc(numThreads * sizeof(double*))             # <<<<<<<<<<<<<<
 *     D.acc.INTENSITY_CACHE = <double**> malloc(numThreads * sizeof(double*))
 *     D.acc.VEC_CACHE = <double**> malloc(numThreads * sizeof(double*))
 */
  __pyx_v_D->acc.DIFF = ((double **)malloc((__pyx_v_numThreads * (sizeof(double *)))));

  /* "hot.pyx":91
 *     D.acc.SPACE = <double**> malloc(numThreads * sizeof(double*))
 *     D.acc.DIFF = <double**> malloc(numThreads * sizeof(double*))
 *     D.acc.INTENSITY_CACHE = <double**> malloc(numThreads * sizeof(double*))             # <<<<<<<<<<<<<<
 *     D.acc.VEC_CACHE = <double**> malloc(numThreads * sizeof(double*))
 * 
 */
  __pyx_v_D->acc.INTENSITY_CACHE = ((double **)malloc((__pyx_v_numThreads * (sizeof(double *)))));

  /* "hot.pyx":92
 *     D.acc.DIFF = <double**> malloc(numThreads * sizeof(double*))
 *     D.acc.INTENSITY_CACHE = <double**> malloc(numThreads * sizeof(double*))
 *     D.acc.VEC_CACHE = <double**> malloc(numThreads * sizeof(double*))             # <<<<<<<<<<<<<<
 * 
 *     for T in range(numThreads):
 */
  __pyx_v_D->acc.VEC_CACHE = ((double **)malloc((__pyx_v_numThreads * (sizeof(double *)))));

  /* "hot.pyx":94
 *     D.acc.VEC_CACHE = <double**> malloc(numThreads * sizeof(double*))
 * 
 *     for T in range(numThreads):             # <<<<<<<<<<<<<<
 *         D.acc.BN[T] = <size_t*> malloc(D.p.ndims * sizeof(size_t))
 *         D.acc.node_vals[T] = <double*> malloc(2 * D.p.ndims * sizeof(double))
 */
  __pyx_t_1 = __pyx_v_numThreads;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_T = __pyx_t_3;

    /* "hot.pyx":95
 * 
 *     for T in range(numThreads):
 *         D.acc.BN[T] = <size_t*> malloc(D.p.ndims * sizeof(size_t))             # <<<<<<<<<<<<<<
 *         D.acc.node_vals[T] = <double*> malloc(2 * D.p.ndims * sizeof(double))
 *         D.acc.SPACE[T] = <double*> malloc(4 * D.p.ndims * sizeof(double))
 */
    (__pyx_v_D->acc.BN[__pyx_v_T]) = ((size_t *)malloc((__pyx_v_D->p->ndims * (sizeof(size_t)))));

    /* "hot.pyx":96
 *     for T in range(numThreads):
 *         D.acc.BN[T] = <size_t*> malloc(D.p.ndims * sizeof(size_t))
 *         D.acc.node_vals[T] = <double*> malloc(2 * D.p.ndims * sizeof(double))             # <<<<<<<<<<<<<<
 *         D.acc.SPACE[T] = <double*> malloc(4 * D.p.ndims * sizeof(double))
 *         D.acc.DIFF[T] = <double*> malloc(4 * D.p.ndims * sizeof(double))
 */
    (__pyx_v_D->acc.node_vals[__pyx_v_T]) = ((double *)malloc(((2 * __pyx_v_D->p->ndims) * (sizeof(double)))));

    /* "hot.pyx":97
 *         D.acc.BN[T] = <size_t*> malloc(D.p.ndims * sizeof(size_t))
 *         D.acc.node_vals[T] = <double*> malloc(2 * D.p.ndims * sizeof(double))
 *         D.acc.SPACE[T] = <double*> malloc(4 * D.p.ndims * sizeof(double))             # <<<<<<<<<<<<<<
 *         D.acc.DIFF[T] = <double*> malloc(4 * D.p.ndims * sizeof(double))
 *         #D.acc.INTENSITY_CACHE[T] = <double*> malloc(256 * sizeof(double))
 */
    (__pyx_v_D->acc.SPACE[__pyx_v_T]) = ((double *)malloc(((4 * __pyx_v_D->p->ndims) * (sizeof(double)))));

    /* "hot.pyx":98
 *         D.acc.node_vals[T] = <double*> malloc(2 * D.p.ndims * sizeof(double))
 *         D.acc.SPACE[T] = <double*> malloc(4 * D.p.ndims * sizeof(double))
 *         D.acc.DIFF[T] = <double*> malloc(4 * D.p.ndims * sizeof(double))             # <<<<<<<<<<<<<<
 *         #D.acc.INTENSITY_CACHE[T] = <double*> malloc(256 * sizeof(double))
 *         D.acc.INTENSITY_CACHE[T] = <double*> malloc(1024 * sizeof(double))
 */
    (__pyx_v_D->acc.DIFF[__pyx_v_T]) = ((double *)malloc(((4 * __pyx_v_D->p->ndims) * (sizeof(double)))));

    /* "hot.pyx":100
 *         D.acc.DIFF[T] = <double*> malloc(4 * D.p.ndims * sizeof(double))
 *         #D.acc.INTENSITY_CACHE[T] = <double*> malloc(256 * sizeof(double))
 *         D.acc.INTENSITY_CACHE[T] = <double*> malloc(1024 * sizeof(double))             # <<<<<<<<<<<<<<
 *         D.acc.VEC_CACHE[T] = <double*> malloc(D.p.ndims * sizeof(double))
 *         for i in range(D.p.ndims):
 */
    (__pyx_v_D->acc.INTENSITY_CACHE[__pyx_v_T]) = ((double *)malloc((0x400 * (sizeof(double)))));

    /* "hot.pyx":101
 *         #D.acc.INTENSITY_CACHE[T] = <double*> malloc(256 * sizeof(double))
 *         D.acc.INTENSITY_CACHE[T] = <double*> malloc(1024 * sizeof(double))
 *         D.acc.VEC_CACHE[T] = <double*> malloc(D.p.ndims * sizeof(double))             # <<<<<<<<<<<<<<
 *         for i in range(D.p.ndims):
 *             D.acc.BN[T][i] = 0
 */
    (__pyx_v_D->acc.VEC_CACHE[__pyx_v_T]) = ((double *)malloc((__pyx_v_D->p->ndims * (sizeof(double)))));

    /* "hot.pyx":102
 *         D.acc.INTENSITY_CACHE[T] = <double*> malloc(1024 * sizeof(double))
 *         D.acc.VEC_CACHE[T] = <double*> malloc(D.p.ndims * sizeof(double))
 *         for i in range(D.p.ndims):             # <<<<<<<<<<<<<<
 *             D.acc.BN[T][i] = 0
 *             D.acc.VEC_CACHE[T][i] = D.p.params[i][1]
 */
    __pyx_t_4 = __pyx_v_D->p->ndims;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "hot.pyx":103
 *         D.acc.VEC_CACHE[T] = <double*> malloc(D.p.ndims * sizeof(double))
 *         for i in range(D.p.ndims):
 *             D.acc.BN[T][i] = 0             # <<<<<<<<<<<<<<
 *             D.acc.VEC_CACHE[T][i] = D.p.params[i][1]
 *             D.acc.node_vals[T][2*i] = D.p.params[i][1]
 */
      ((__pyx_v_D->acc.BN[__pyx_v_T])[__pyx_v_i]) = 0;

      /* "hot.pyx":104
 *         for i in range(D.p.ndims):
 *             D.acc.BN[T][i] = 0
 *             D.acc.VEC_CACHE[T][i] = D.p.params[i][1]             # <<<<<<<<<<<<<<
 *             D.acc.node_vals[T][2*i] = D.p.params[i][1]
 *             D.acc.node_vals[T][2*i + 1] = D.p.params[i][2]
 */
      ((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) = ((__pyx_v_D->p->params[__pyx_v_i])[1]);

      /* "hot.pyx":105
 *             D.acc.BN[T][i] = 0
 *             D.acc.VEC_CACHE[T][i] = D.p.params[i][1]
 *             D.acc.node_vals[T][2*i] = D.p.params[i][1]             # <<<<<<<<<<<<<<
 *             D.acc.node_vals[T][2*i + 1] = D.p.params[i][2]
 * 
 */
      ((__pyx_v_D->acc.node_vals[__pyx_v_T])[(2 * __pyx_v_i)]) = ((__pyx_v_D->p->params[__pyx_v_i])[1]);

      /* "hot.pyx":106
 *             D.acc.VEC_CACHE[T][i] = D.p.params[i][1]
 *             D.acc.node_vals[T][2*i] = D.p.params[i][1]
 *             D.acc.node_vals[T][2*i + 1] = D.p.params[i][2]             # <<<<<<<<<<<<<<
 * 
 *             j = 4*i
 */
      ((__pyx_v_D->acc.node_vals[__pyx_v_T])[((2 * __pyx_v_i) + 1)]) = ((__pyx_v_D->p->params[__pyx_v_i])[2]);

      /* "hot.pyx":108
 *             D.acc.node_vals[T][2*i + 1] = D.p.params[i][2]
 * 
 *             j = 4*i             # <<<<<<<<<<<<<<
 * 
 *             D.acc.SPACE[T][j] = 1.0 / (D.p.params[i][0] - D.p.params[i][1])
 */
      __pyx_v_j = (4 * __pyx_v_i);

      /* "hot.pyx":110
 *             j = 4*i
 * 
 *             D.acc.SPACE[T][j] = 1.0 / (D.p.params[i][0] - D.p.params[i][1])             # <<<<<<<<<<<<<<
 *             D.acc.SPACE[T][j] /= D.p.params[i][0] - D.p.params[i][2]
 *             D.acc.SPACE[T][j] /= D.p.params[i][0] - D.p.params[i][3]
 */
      ((__pyx_v_D->acc.SPACE[__pyx_v_T])[__pyx_v_j]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[0]) - ((__pyx_v_D->p->params[__pyx_v_i])[1])));

      /* "hot.pyx":111
 * 
 *             D.acc.SPACE[T][j] = 1.0 / (D.p.params[i][0] - D.p.params[i][1])
 *             D.acc.SPACE[T][j] /= D.p.params[i][0] - D.p.params[i][2]             # <<<<<<<<<<<<<<
 *             D.acc.SPACE[T][j] /= D.p.params[i][0] - D.p.params[i][3]
 * 
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = __pyx_v_j;
      ((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) / (((__pyx_v_D->p->params[__pyx_v_i])[0]) - ((__pyx_v_D->p->params[__pyx_v_i])[2])));

      /* "hot.pyx":112
 *             D.acc.SPACE[T][j] = 1.0 / (D.p.params[i][0] - D.p.params[i][1])
 *             D.acc.SPACE[T][j] /= D.p.params[i][0] - D.p.params[i][2]
 *             D.acc.SPACE[T][j] /= D.p.params[i][0] - D.p.params[i][3]             # <<<<<<<<<<<<<<
 * 
 *             D.acc.SPACE[T][j + 1] = 1.0 / (D.p.params[i][1] - D.p.params[i][0])
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = __pyx_v_j;
      ((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) / (((__pyx_v_D->p->params[__pyx_v_i])[0]) - ((__pyx_v_D->p->params[__pyx_v_i])[3])));

      /* "hot.pyx":114
 *             D.acc.SPACE[T][j] /= D.p.params[i][0] - D.p.params[i][3]
 * 
 *             D.acc.SPACE[T][j + 1] = 1.0 / (D.p.params[i][1] - D.p.params[i][0])             # <<<<<<<<<<<<<<
 *             D.acc.SPACE[T][j + 1] /= D.p.params[i][1] - D.p.params[i][2]
 *             D.acc.SPACE[T][j + 1] /= D.p.params[i][1] - D.p.params[i][3]
 */
      ((__pyx_v_D->acc.SPACE[__pyx_v_T])[(__pyx_v_j + 1)]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[1]) - ((__pyx_v_D->p->params[__pyx_v_i])[0])));

      /* "hot.pyx":115
 * 
 *             D.acc.SPACE[T][j + 1] = 1.0 / (D.p.params[i][1] - D.p.params[i][0])
 *             D.acc.SPACE[T][j + 1] /= D.p.params[i][1] - D.p.params[i][2]             # <<<<<<<<<<<<<<
 *             D.acc.SPACE[T][j + 1] /= D.p.params[i][1] - D.p.params[i][3]
 * 
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 1);
      ((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) / (((__pyx_v_D->p->params[__pyx_v_i])[1]) - ((__pyx_v_D->p->params[__pyx_v_i])[2])));

      /* "hot.pyx":116
 *             D.acc.SPACE[T][j + 1] = 1.0 / (D.p.params[i][1] - D.p.params[i][0])
 *             D.acc.SPACE[T][j + 1] /= D.p.params[i][1] - D.p.params[i][2]
 *             D.acc.SPACE[T][j + 1] /= D.p.params[i][1] - D.p.params[i][3]             # <<<<<<<<<<<<<<
 * 
 *             D.acc.SPACE[T][j + 2] = 1.0 / (D.p.params[i][2] - D.p.params[i][0])
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 1);
      ((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) / (((__pyx_v_D->p->params[__pyx_v_i])[1]) - ((__pyx_v_D->p->params[__pyx_v_i])[3])));

      /* "hot.pyx":118
 *             D.acc.SPACE[T][j + 1] /= D.p.params[i][1] - D.p.params[i][3]
 * 
 *             D.acc.SPACE[T][j + 2] = 1.0 / (D.p.params[i][2] - D.p.params[i][0])             # <<<<<<<<<<<<<<
 *             D.acc.SPACE[T][j + 2] /= D.p.params[i][2] - D.p.params[i][1]
 *             D.acc.SPACE[T][j + 2] /= D.p.params[i][2] - D.p.params[i][3]
 */
      ((__pyx_v_D->acc.SPACE[__pyx_v_T])[(__pyx_v_j + 2)]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[2]) - ((__pyx_v_D->p->params[__pyx_v_i])[0])));

      /* "hot.pyx":119
 * 
 *             D.acc.SPACE[T][j + 2] = 1.0 / (D.p.params[i][2] - D.p.params[i][0])
 *             D.acc.SPACE[T][j + 2] /= D.p.params[i][2] - D.p.params[i][1]             # <<<<<<<<<<<<<<
 *             D.acc.SPACE[T][j + 2] /= D.p.params[i][2] - D.p.params[i][3]
 * 
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 2);
      ((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) / (((__pyx_v_D->p->params[__pyx_v_i])[2]) - ((__pyx_v_D->p->params[__pyx_v_i])[1])));

      /* "hot.pyx":120
 *             D.acc.SPACE[T][j + 2] = 1.0 / (D.p.params[i][2] - D.p.params[i][0])
 *             D.acc.SPACE[T][j + 2] /= D.p.params[i][2] - D.p.params[i][1]
 *             D.acc.SPACE[T][j + 2] /= D.p.params[i][2] - D.p.params[i][3]             # <<<<<<<<<<<<<<
 * 
 *             D.acc.SPACE[T][j + 3] = 1.0 / (D.p.params[i][3] - D.p.params[i][0])
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 2);
      ((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) / (((__pyx_v_D->p->params[__pyx_v_i])[2]) - ((__pyx_v_D->p->params[__pyx_v_i])[3])));

      /* "hot.pyx":122
 *             D.acc.SPACE[T][j + 2] /= D.p.params[i][2] - D.p.params[i][3]
 * 
 *             D.acc.SPACE[T][j + 3] = 1.0 / (D.p.params[i][3] - D.p.params[i][0])             # <<<<<<<<<<<<<<
 *             D.acc.SPACE[T][j + 3] /= D.p.params[i][3] - D.p.params[i][1]
 *             D.acc.SPACE[T][j + 3] /= D.p.params[i][3] - D.p.params[i][2]
 */
      ((__pyx_v_D->acc.SPACE[__pyx_v_T])[(__pyx_v_j + 3)]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[3]) - ((__pyx_v_D->p->params[__pyx_v_i])[0])));

      /* "hot.pyx":123
 * 
 *             D.acc.SPACE[T][j + 3] = 1.0 / (D.p.params[i][3] - D.p.params[i][0])
 *             D.acc.SPACE[T][j + 3] /= D.p.params[i][3] - D.p.params[i][1]             # <<<<<<<<<<<<<<
 *             D.acc.SPACE[T][j + 3] /= D.p.params[i][3] - D.p.params[i][2]
 * 
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 3);
      ((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) / (((__pyx_v_D->p->params[__pyx_v_i])[3]) - ((__pyx_v_D->p->params[__pyx_v_i])[1])));

      /* "hot.pyx":124
 *             D.acc.SPACE[T][j + 3] = 1.0 / (D.p.params[i][3] - D.p.params[i][0])
 *             D.acc.SPACE[T][j + 3] /= D.p.params[i][3] - D.p.params[i][1]
 *             D.acc.SPACE[T][j + 3] /= D.p.params[i][3] - D.p.params[i][2]             # <<<<<<<<<<<<<<
 * 
 *             D.acc.DIFF[T][j] = D.acc.VEC_CACHE[T][i] - D.p.params[i][1]
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 3);
      ((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.SPACE[__pyx_t_7])[__pyx_t_8]) / (((__pyx_v_D->p->params[__pyx_v_i])[3]) - ((__pyx_v_D->p->params[__pyx_v_i])[2])));

      /* "hot.pyx":126
 *             D.acc.SPACE[T][j + 3] /= D.p.params[i][3] - D.p.params[i][2]
 * 
 *             D.acc.DIFF[T][j] = D.acc.VEC_CACHE[T][i] - D.p.params[i][1]             # <<<<<<<<<<<<<<
 *             D.acc.DIFF[T][j] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][2]
 *             D.acc.DIFF[T][j] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]
 */
      ((__pyx_v_D->acc.DIFF[__pyx_v_T])[__pyx_v_j]) = (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[1]));

      /* "hot.pyx":127
 * 
 *             D.acc.DIFF[T][j] = D.acc.VEC_CACHE[T][i] - D.p.params[i][1]
 *             D.acc.DIFF[T][j] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][2]             # <<<<<<<<<<<<<<
 *             D.acc.DIFF[T][j] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]
 * 
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = __pyx_v_j;
      ((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) * (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[2])));

      /* "hot.pyx":128
 *             D.acc.DIFF[T][j] = D.acc.VEC_CACHE[T][i] - D.p.params[i][1]
 *             D.acc.DIFF[T][j] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][2]
 *             D.acc.DIFF[T][j] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]             # <<<<<<<<<<<<<<
 * 
 *             D.acc.DIFF[T][j + 1] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = __pyx_v_j;
      ((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) * (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[3])));

      /* "hot.pyx":130
 *             D.acc.DIFF[T][j] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]
 * 
 *             D.acc.DIFF[T][j + 1] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]             # <<<<<<<<<<<<<<
 *             D.acc.DIFF[T][j + 1] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][2]
 *             D.acc.DIFF[T][j + 1] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]
 */
      ((__pyx_v_D->acc.DIFF[__pyx_v_T])[(__pyx_v_j + 1)]) = (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[0]));

      /* "hot.pyx":131
 * 
 *             D.acc.DIFF[T][j + 1] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]
 *             D.acc.DIFF[T][j + 1] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][2]             # <<<<<<<<<<<<<<
 *             D.acc.DIFF[T][j + 1] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]
 * 
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 1);
      ((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) * (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[2])));

      /* "hot.pyx":132
 *             D.acc.DIFF[T][j + 1] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]
 *             D.acc.DIFF[T][j + 1] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][2]
 *             D.acc.DIFF[T][j + 1] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]             # <<<<<<<<<<<<<<
 * 
 *             D.acc.DIFF[T][j + 2] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 1);
      ((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) * (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[3])));

      /* "hot.pyx":134
 *             D.acc.DIFF[T][j + 1] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]
 * 
 *             D.acc.DIFF[T][j + 2] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]             # <<<<<<<<<<<<<<
 *             D.acc.DIFF[T][j + 2] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][1]
 *             D.acc.DIFF[T][j + 2] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]
 */
      ((__pyx_v_D->acc.DIFF[__pyx_v_T])[(__pyx_v_j + 2)]) = (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[0]));

      /* "hot.pyx":135
 * 
 *             D.acc.DIFF[T][j + 2] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]
 *             D.acc.DIFF[T][j + 2] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][1]             # <<<<<<<<<<<<<<
 *             D.acc.DIFF[T][j + 2] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]
 * 
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 2);
      ((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) * (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[1])));

      /* "hot.pyx":136
 *             D.acc.DIFF[T][j + 2] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]
 *             D.acc.DIFF[T][j + 2] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][1]
 *             D.acc.DIFF[T][j + 2] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]             # <<<<<<<<<<<<<<
 * 
 *             D.acc.DIFF[T][j + 3] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 2);
      ((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) * (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[3])));

      /* "hot.pyx":138
 *             D.acc.DIFF[T][j + 2] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][3]
 * 
 *             D.acc.DIFF[T][j + 3] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]             # <<<<<<<<<<<<<<
 *             D.acc.DIFF[T][j + 3] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][1]
 *             D.acc.DIFF[T][j + 3] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][2]
 */
      ((__pyx_v_D->acc.DIFF[__pyx_v_T])[(__pyx_v_j + 3)]) = (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[0]));

      /* "hot.pyx":139
 * 
 *             D.acc.DIFF[T][j + 3] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]
 *             D.acc.DIFF[T][j + 3] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][1]             # <<<<<<<<<<<<<<
 *             D.acc.DIFF[T][j + 3] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][2]
 * 
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 3);
      ((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) * (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[1])));

      /* "hot.pyx":140
 *             D.acc.DIFF[T][j + 3] = D.acc.VEC_CACHE[T][i] - D.p.params[i][0]
 *             D.acc.DIFF[T][j + 3] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][1]
 *             D.acc.DIFF[T][j + 3] *= D.acc.VEC_CACHE[T][i] - D.p.params[i][2]             # <<<<<<<<<<<<<<
 * 
 *         # printf("diagnostics for initialization\n")
 */
      __pyx_t_7 = __pyx_v_T;
      __pyx_t_8 = (__pyx_v_j + 3);
      ((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_D->acc.DIFF[__pyx_t_7])[__pyx_t_8]) * (((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T])[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[2])));
    }
  }

  /* "hot.pyx":149
 * 
 * 
 *     cdef double *address = NULL             # <<<<<<<<<<<<<<
 *     # Cache intensity
 *     # printf("\ncommencing cache intensity")
 */
  __pyx_v_address = NULL;

  /* "hot.pyx":167
 *     #                     D.acc.INTENSITY_CACHE[T][i * D.p.BLOCKS[0] + j * D.p.BLOCKS[1] + k * D.p.BLOCKS[2] + l] = address[0]
 * 
 *     clock_gettime(CLOCK_REALTIME, &te)             # <<<<<<<<<<<<<<
 *     t_elapsed = (te.tv_nsec - ts.tv_nsec)
 *     printf("everything before forloops init_hot() takes %ld ns\n", t_elapsed)
 */
  (void)(clock_gettime(CLOCK_REALTIME, (&__pyx_v_3hot_te)));

  /* "hot.pyx":168
 * 
 *     clock_gettime(CLOCK_REALTIME, &te)
 *     t_elapsed = (te.tv_nsec - ts.tv_nsec)             # <<<<<<<<<<<<<<
 *     printf("everything before forloops init_hot() takes %ld ns\n", t_elapsed)
 *     clock_gettime(CLOCK_REALTIME, &ts)
 */
  __pyx_v_t_elapsed = (__pyx_v_3hot_te.tv_nsec - __pyx_v_3hot_ts.tv_nsec);

  /* "hot.pyx":169
 *     clock_gettime(CLOCK_REALTIME, &te)
 *     t_elapsed = (te.tv_nsec - ts.tv_nsec)
 *     printf("everything before forloops init_hot() takes %ld ns\n", t_elapsed)             # <<<<<<<<<<<<<<
 *     clock_gettime(CLOCK_REALTIME, &ts)
 * 
 */
  (void)(printf(((char const *)"everything before forloops init_hot() takes %ld ns\n"), __pyx_v_t_elapsed));

  /* "hot.pyx":170
 *     t_elapsed = (te.tv_nsec - ts.tv_nsec)
 *     printf("everything before forloops init_hot() takes %ld ns\n", t_elapsed)
 *     clock_gettime(CLOCK_REALTIME, &ts)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (void)(clock_gettime(CLOCK_REALTIME, (&__pyx_v_3hot_ts)));

  /* "hot.pyx":173
 * 
 * 
 *     for T in range(numThreads):             # <<<<<<<<<<<<<<
 *         for i in range(4):
 *             for j in range(4):
 */
  __pyx_t_1 = __pyx_v_numThreads;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_T = __pyx_t_3;

    /* "hot.pyx":174
 * 
 *     for T in range(numThreads):
 *         for i in range(4):             # <<<<<<<<<<<<<<
 *             for j in range(4):
 *                 for k in range(4):
 */
    for (__pyx_t_4 = 0; __pyx_t_4 < 4; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "hot.pyx":175
 *     for T in range(numThreads):
 *         for i in range(4):
 *             for j in range(4):             # <<<<<<<<<<<<<<
 *                 for k in range(4):
 *                     for l in range(4):
 */
      for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=1) {
        __pyx_v_j = __pyx_t_5;

        /* "hot.pyx":176
 *         for i in range(4):
 *             for j in range(4):
 *                 for k in range(4):             # <<<<<<<<<<<<<<
 *                     for l in range(4):
 *                         for m in range(4):
 */
        for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
          __pyx_v_k = __pyx_t_6;

          /* "hot.pyx":177
 *             for j in range(4):
 *                 for k in range(4):
 *                     for l in range(4):             # <<<<<<<<<<<<<<
 *                         for m in range(4):
 *                             address = D.p.I + (D.acc.BN[T][0] + i) * D.p.S[0]
 */
          for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
            __pyx_v_l = __pyx_t_7;

            /* "hot.pyx":178
 *                 for k in range(4):
 *                     for l in range(4):
 *                         for m in range(4):             # <<<<<<<<<<<<<<
 *                             address = D.p.I + (D.acc.BN[T][0] + i) * D.p.S[0]
 *                             address += (D.acc.BN[T][1] + j) * D.p.S[1]
 */
            for (__pyx_t_8 = 0; __pyx_t_8 < 4; __pyx_t_8+=1) {
              __pyx_v_m = __pyx_t_8;

              /* "hot.pyx":179
 *                     for l in range(4):
 *                         for m in range(4):
 *                             address = D.p.I + (D.acc.BN[T][0] + i) * D.p.S[0]             # <<<<<<<<<<<<<<
 *                             address += (D.acc.BN[T][1] + j) * D.p.S[1]
 *                             address += (D.acc.BN[T][2] + k) * D.p.S[2]
 */
              __pyx_v_address = (__pyx_v_D->p->I + ((((__pyx_v_D->acc.BN[__pyx_v_T])[0]) + __pyx_v_i) * (__pyx_v_D->p->S[0])));

              /* "hot.pyx":180
 *                         for m in range(4):
 *                             address = D.p.I + (D.acc.BN[T][0] + i) * D.p.S[0]
 *                             address += (D.acc.BN[T][1] + j) * D.p.S[1]             # <<<<<<<<<<<<<<
 *                             address += (D.acc.BN[T][2] + k) * D.p.S[2]
 *                             address += (D.acc.BN[T][3] + l) * D.p.S[3]
 */
              __pyx_v_address = (__pyx_v_address + ((((__pyx_v_D->acc.BN[__pyx_v_T])[1]) + __pyx_v_j) * (__pyx_v_D->p->S[1])));

              /* "hot.pyx":181
 *                             address = D.p.I + (D.acc.BN[T][0] + i) * D.p.S[0]
 *                             address += (D.acc.BN[T][1] + j) * D.p.S[1]
 *                             address += (D.acc.BN[T][2] + k) * D.p.S[2]             # <<<<<<<<<<<<<<
 *                             address += (D.acc.BN[T][3] + l) * D.p.S[3]
 *                             address += D.acc.BN[T][4] + m
 */
              __pyx_v_address = (__pyx_v_address + ((((__pyx_v_D->acc.BN[__pyx_v_T])[2]) + __pyx_v_k) * (__pyx_v_D->p->S[2])));

              /* "hot.pyx":182
 *                             address += (D.acc.BN[T][1] + j) * D.p.S[1]
 *                             address += (D.acc.BN[T][2] + k) * D.p.S[2]
 *                             address += (D.acc.BN[T][3] + l) * D.p.S[3]             # <<<<<<<<<<<<<<
 *                             address += D.acc.BN[T][4] + m
 *                             D.acc.INTENSITY_CACHE[T][i * D.p.BLOCKS[0] + j * D.p.BLOCKS[1] + k * D.p.BLOCKS[2] + l * D.p.BLOCKS[3] + m] = address[0]
 */
              __pyx_v_address = (__pyx_v_address + ((((__pyx_v_D->acc.BN[__pyx_v_T])[3]) + __pyx_v_l) * (__pyx_v_D->p->S[3])));

              /* "hot.pyx":183
 *                             address += (D.acc.BN[T][2] + k) * D.p.S[2]
 *                             address += (D.acc.BN[T][3] + l) * D.p.S[3]
 *                             address += D.acc.BN[T][4] + m             # <<<<<<<<<<<<<<
 *                             D.acc.INTENSITY_CACHE[T][i * D.p.BLOCKS[0] + j * D.p.BLOCKS[1] + k * D.p.BLOCKS[2] + l * D.p.BLOCKS[3] + m] = address[0]
 * 
 */
              __pyx_v_address = (__pyx_v_address + (((__pyx_v_D->acc.BN[__pyx_v_T])[4]) + __pyx_v_m));

              /* "hot.pyx":184
 *                             address += (D.acc.BN[T][3] + l) * D.p.S[3]
 *                             address += D.acc.BN[T][4] + m
 *                             D.acc.INTENSITY_CACHE[T][i * D.p.BLOCKS[0] + j * D.p.BLOCKS[1] + k * D.p.BLOCKS[2] + l * D.p.BLOCKS[3] + m] = address[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
              ((__pyx_v_D->acc.INTENSITY_CACHE[__pyx_v_T])[(((((__pyx_v_i * (__pyx_v_D->p->BLOCKS[0])) + (__pyx_v_j * (__pyx_v_D->p->BLOCKS[1]))) + (__pyx_v_k * (__pyx_v_D->p->BLOCKS[2]))) + (__pyx_v_l * (__pyx_v_D->p->BLOCKS[3]))) + __pyx_v_m)]) = (__pyx_v_address[0]);
            }
          }
        }
      }
    }
  }

  /* "hot.pyx":188
 * 
 * 
 *     clock_gettime(CLOCK_REALTIME, &te)             # <<<<<<<<<<<<<<
 *     t_elapsed = (te.tv_nsec - ts.tv_nsec)
 *     printf("init_hot() forloops takes %ld ns\n", t_elapsed)
 */
  (void)(clock_gettime(CLOCK_REALTIME, (&__pyx_v_3hot_te)));

  /* "hot.pyx":189
 * 
 *     clock_gettime(CLOCK_REALTIME, &te)
 *     t_elapsed = (te.tv_nsec - ts.tv_nsec)             # <<<<<<<<<<<<<<
 *     printf("init_hot() forloops takes %ld ns\n", t_elapsed)
 * 
 */
  __pyx_v_t_elapsed = (__pyx_v_3hot_te.tv_nsec - __pyx_v_3hot_ts.tv_nsec);

  /* "hot.pyx":190
 *     clock_gettime(CLOCK_REALTIME, &te)
 *     t_elapsed = (te.tv_nsec - ts.tv_nsec)
 *     printf("init_hot() forloops takes %ld ns\n", t_elapsed)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (void)(printf(((char const *)"init_hot() forloops takes %ld ns\n"), __pyx_v_t_elapsed));

  /* "hot.pyx":194
 * 
 *     # Cast for generalised usage in integration routines
 *     return <void*> D             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_D);
  goto __pyx_L0;

  /* "hot.pyx":56
 * # ... the Cython language.
 * #----------------------------------------------------------------------->>>
 * cdef void* init_hot(size_t numThreads, const _preloaded *const preloaded) nogil:             # <<<<<<<<<<<<<<
 *     # This function must match the free management routine free_hot()
 *     # in terms of freeing dynamically allocated memory. This is entirely
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "hot.pyx":197
 * 
 * 
 * cdef int free_hot(size_t numThreads, void *const data) nogil:             # <<<<<<<<<<<<<<
 *     # This function must match the initialisation routine init_hot()
 *     # in terms of freeing dynamically allocated memory. This is entirely
 */

static int __pyx_f_3hot_free_hot(size_t __pyx_v_numThreads, void *const __pyx_v_data) {
  __pyx_t_3hot_DATA *__pyx_v_D;
  size_t __pyx_v_T;
  long __pyx_v_t_elapsed;
  int __pyx_r;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;

  /* "hot.pyx":209
 * 
 *     # printf("inside free_hot()")
 *     clock_gettime(CLOCK_REALTIME, &ts)             # <<<<<<<<<<<<<<
 * 
 *     cdef DATA *D = <DATA*> data
 */
  (void)(clock_gettime(CLOCK_REALTIME, (&__pyx_v_3hot_ts)));

  /* "hot.pyx":211
 *     clock_gettime(CLOCK_REALTIME, &ts)
 * 
 *     cdef DATA *D = <DATA*> data             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t T
 */
  __pyx_v_D = ((__pyx_t_3hot_DATA *)__pyx_v_data);

  /* "hot.pyx":215
 *     cdef size_t T
 * 
 *     for T in range(numThreads):             # <<<<<<<<<<<<<<
 *         # printf("freeing thread specific memory")
 *         free(D.acc.BN[T])
 */
  __pyx_t_1 = __pyx_v_numThreads;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_T = __pyx_t_3;

    /* "hot.pyx":217
 *     for T in range(numThreads):
 *         # printf("freeing thread specific memory")
 *         free(D.acc.BN[T])             # <<<<<<<<<<<<<<
 *         free(D.acc.node_vals[T])
 *         free(D.acc.SPACE[T])
 */
    free((__pyx_v_D->acc.BN[__pyx_v_T]));

    /* "hot.pyx":218
 *         # printf("freeing thread specific memory")
 *         free(D.acc.BN[T])
 *         free(D.acc.node_vals[T])             # <<<<<<<<<<<<<<
 *         free(D.acc.SPACE[T])
 *         free(D.acc.DIFF[T])
 */
    free((__pyx_v_D->acc.node_vals[__pyx_v_T]));

    /* "hot.pyx":219
 *         free(D.acc.BN[T])
 *         free(D.acc.node_vals[T])
 *         free(D.acc.SPACE[T])             # <<<<<<<<<<<<<<
 *         free(D.acc.DIFF[T])
 *         free(D.acc.INTENSITY_CACHE[T])
 */
    free((__pyx_v_D->acc.SPACE[__pyx_v_T]));

    /* "hot.pyx":220
 *         free(D.acc.node_vals[T])
 *         free(D.acc.SPACE[T])
 *         free(D.acc.DIFF[T])             # <<<<<<<<<<<<<<
 *         free(D.acc.INTENSITY_CACHE[T])
 *         free(D.acc.VEC_CACHE[T])
 */
    free((__pyx_v_D->acc.DIFF[__pyx_v_T]));

    /* "hot.pyx":221
 *         free(D.acc.SPACE[T])
 *         free(D.acc.DIFF[T])
 *         free(D.acc.INTENSITY_CACHE[T])             # <<<<<<<<<<<<<<
 *         free(D.acc.VEC_CACHE[T])
 * 
 */
    free((__pyx_v_D->acc.INTENSITY_CACHE[__pyx_v_T]));

    /* "hot.pyx":222
 *         free(D.acc.DIFF[T])
 *         free(D.acc.INTENSITY_CACHE[T])
 *         free(D.acc.VEC_CACHE[T])             # <<<<<<<<<<<<<<
 * 
 *     # printf("freeing D.acc...")
 */
    free((__pyx_v_D->acc.VEC_CACHE[__pyx_v_T]));
  }

  /* "hot.pyx":225
 * 
 *     # printf("freeing D.acc...")
 *     free(D.acc.BN)             # <<<<<<<<<<<<<<
 *     free(D.acc.node_vals)
 *     free(D.acc.SPACE)
 */
  free(__pyx_v_D->acc.BN);

  /* "hot.pyx":226
 *     # printf("freeing D.acc...")
 *     free(D.acc.BN)
 *     free(D.acc.node_vals)             # <<<<<<<<<<<<<<
 *     free(D.acc.SPACE)
 *     free(D.acc.DIFF)
 */
  free(__pyx_v_D->acc.node_vals);

  /* "hot.pyx":227
 *     free(D.acc.BN)
 *     free(D.acc.node_vals)
 *     free(D.acc.SPACE)             # <<<<<<<<<<<<<<
 *     free(D.acc.DIFF)
 *     free(D.acc.INTENSITY_CACHE)
 */
  free(__pyx_v_D->acc.SPACE);

  /* "hot.pyx":228
 *     free(D.acc.node_vals)
 *     free(D.acc.SPACE)
 *     free(D.acc.DIFF)             # <<<<<<<<<<<<<<
 *     free(D.acc.INTENSITY_CACHE)
 *     free(D.acc.VEC_CACHE)
 */
  free(__pyx_v_D->acc.DIFF);

  /* "hot.pyx":229
 *     free(D.acc.SPACE)
 *     free(D.acc.DIFF)
 *     free(D.acc.INTENSITY_CACHE)             # <<<<<<<<<<<<<<
 *     free(D.acc.VEC_CACHE)
 * 
 */
  free(__pyx_v_D->acc.INTENSITY_CACHE);

  /* "hot.pyx":230
 *     free(D.acc.DIFF)
 *     free(D.acc.INTENSITY_CACHE)
 *     free(D.acc.VEC_CACHE)             # <<<<<<<<<<<<<<
 * 
 *     # printf("freeing D...")
 */
  free(__pyx_v_D->acc.VEC_CACHE);

  /* "hot.pyx":233
 * 
 *     # printf("freeing D...")
 *     free(D)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  free(__pyx_v_D);

  /* "hot.pyx":237
 * 
 * 
 *     clock_gettime(CLOCK_REALTIME, &te)             # <<<<<<<<<<<<<<
 *     t_elapsed = (te.tv_nsec - ts.tv_nsec)
 *     printf("free_hot() takes %ld ns\n", t_elapsed)
 */
  (void)(clock_gettime(CLOCK_REALTIME, (&__pyx_v_3hot_te)));

  /* "hot.pyx":238
 * 
 *     clock_gettime(CLOCK_REALTIME, &te)
 *     t_elapsed = (te.tv_nsec - ts.tv_nsec)             # <<<<<<<<<<<<<<
 *     printf("free_hot() takes %ld ns\n", t_elapsed)
 * 
 */
  __pyx_v_t_elapsed = (__pyx_v_3hot_te.tv_nsec - __pyx_v_3hot_ts.tv_nsec);

  /* "hot.pyx":239
 *     clock_gettime(CLOCK_REALTIME, &te)
 *     t_elapsed = (te.tv_nsec - ts.tv_nsec)
 *     printf("free_hot() takes %ld ns\n", t_elapsed)             # <<<<<<<<<<<<<<
 * 
 *     return SUCCESS
 */
  (void)(printf(((char const *)"free_hot() takes %ld ns\n"), __pyx_v_t_elapsed));

  /* "hot.pyx":241
 *     printf("free_hot() takes %ld ns\n", t_elapsed)
 * 
 *     return SUCCESS             # <<<<<<<<<<<<<<
 * 
 * #----------------------------------------------------------------------->>>
 */
  __pyx_r = __pyx_v_3hot_SUCCESS;
  goto __pyx_L0;

  /* "hot.pyx":197
 * 
 * 
 * cdef int free_hot(size_t numThreads, void *const data) nogil:             # <<<<<<<<<<<<<<
 *     # This function must match the initialisation routine init_hot()
 *     # in terms of freeing dynamically allocated memory. This is entirely
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "hot.pyx":254
 * #                       void *const data) nogil:
 * 
 * cdef double eval_hot(size_t THREAD,             # <<<<<<<<<<<<<<
 *                       double E,
 *                       double mu,
 */

static double __pyx_f_3hot_eval_hot(size_t __pyx_v_THREAD, double __pyx_v_E, double __pyx_v_mu, double __pyx_v_tau, double __pyx_v_t_bb, double __pyx_v_t_e, void *const __pyx_v_data) {
  __pyx_t_3hot_DATA *__pyx_v_D;
  size_t __pyx_v_i;
  size_t __pyx_v_ii;
  double __pyx_v_I;
  double __pyx_v_temp;
  double *__pyx_v_node_vals;
  size_t *__pyx_v_BN;
  double *__pyx_v_SPACE;
  double *__pyx_v_DIFF;
  double *__pyx_v_I_CACHE;
  double *__pyx_v_V_CACHE;
  double __pyx_v_vec[5];
  int __pyx_v_update_baseNode[5];
  int __pyx_v_CACHE;
  size_t __pyx_v_j;
  size_t __pyx_v_k;
  size_t __pyx_v_l;
  size_t __pyx_v_m;
  size_t __pyx_v_INDEX;
  size_t __pyx_v_II;
  size_t __pyx_v_JJ;
  size_t __pyx_v_KK;
  size_t __pyx_v_LL;
  double *__pyx_v_address;
  double __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;

  /* "hot.pyx":279
 * 
 *     #cdef timespec ts
 *     clock_gettime(CLOCK_REALTIME, &ts)             # <<<<<<<<<<<<<<
 * 
 *     cdef DATA *D = <DATA*> data
 */
  (void)(clock_gettime(CLOCK_REALTIME, (&__pyx_v_3hot_ts)));

  /* "hot.pyx":281
 *     clock_gettime(CLOCK_REALTIME, &ts)
 * 
 *     cdef DATA *D = <DATA*> data             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
  __pyx_v_D = ((__pyx_t_3hot_DATA *)__pyx_v_data);

  /* "hot.pyx":284
 * 
 *     cdef:
 *         size_t i = 0, ii             # <<<<<<<<<<<<<<
 *         double I = 0.0, temp
 *         double *node_vals = D.acc.node_vals[THREAD]
 */
  __pyx_v_i = 0;

  /* "hot.pyx":285
 *     cdef:
 *         size_t i = 0, ii
 *         double I = 0.0, temp             # <<<<<<<<<<<<<<
 *         double *node_vals = D.acc.node_vals[THREAD]
 *         size_t *BN = D.acc.BN[THREAD]
 */
  __pyx_v_I = 0.0;

  /* "hot.pyx":286
 *         size_t i = 0, ii
 *         double I = 0.0, temp
 *         double *node_vals = D.acc.node_vals[THREAD]             # <<<<<<<<<<<<<<
 *         size_t *BN = D.acc.BN[THREAD]
 *         double *SPACE = D.acc.SPACE[THREAD]
 */
  __pyx_v_node_vals = (__pyx_v_D->acc.node_vals[__pyx_v_THREAD]);

  /* "hot.pyx":287
 *         double I = 0.0, temp
 *         double *node_vals = D.acc.node_vals[THREAD]
 *         size_t *BN = D.acc.BN[THREAD]             # <<<<<<<<<<<<<<
 *         double *SPACE = D.acc.SPACE[THREAD]
 *         double *DIFF = D.acc.DIFF[THREAD]
 */
  __pyx_v_BN = (__pyx_v_D->acc.BN[__pyx_v_THREAD]);

  /* "hot.pyx":288
 *         double *node_vals = D.acc.node_vals[THREAD]
 *         size_t *BN = D.acc.BN[THREAD]
 *         double *SPACE = D.acc.SPACE[THREAD]             # <<<<<<<<<<<<<<
 *         double *DIFF = D.acc.DIFF[THREAD]
 *         double *I_CACHE = D.acc.INTENSITY_CACHE[THREAD]
 */
  __pyx_v_SPACE = (__pyx_v_D->acc.SPACE[__pyx_v_THREAD]);

  /* "hot.pyx":289
 *         size_t *BN = D.acc.BN[THREAD]
 *         double *SPACE = D.acc.SPACE[THREAD]
 *         double *DIFF = D.acc.DIFF[THREAD]             # <<<<<<<<<<<<<<
 *         double *I_CACHE = D.acc.INTENSITY_CACHE[THREAD]
 *         double *V_CACHE = D.acc.VEC_CACHE[THREAD]
 */
  __pyx_v_DIFF = (__pyx_v_D->acc.DIFF[__pyx_v_THREAD]);

  /* "hot.pyx":290
 *         double *SPACE = D.acc.SPACE[THREAD]
 *         double *DIFF = D.acc.DIFF[THREAD]
 *         double *I_CACHE = D.acc.INTENSITY_CACHE[THREAD]             # <<<<<<<<<<<<<<
 *         double *V_CACHE = D.acc.VEC_CACHE[THREAD]
 *         double vec[5] # should be = ndims
 */
  __pyx_v_I_CACHE = (__pyx_v_D->acc.INTENSITY_CACHE[__pyx_v_THREAD]);

  /* "hot.pyx":291
 *         double *DIFF = D.acc.DIFF[THREAD]
 *         double *I_CACHE = D.acc.INTENSITY_CACHE[THREAD]
 *         double *V_CACHE = D.acc.VEC_CACHE[THREAD]             # <<<<<<<<<<<<<<
 *         double vec[5] # should be = ndims
 *         # double E_eff = k_B_over_keV * pow(10.0, VEC[0])
 */
  __pyx_v_V_CACHE = (__pyx_v_D->acc.VEC_CACHE[__pyx_v_THREAD]);

  /* "hot.pyx":296
 *         # double E_eff = k_B_over_keV * pow(10.0, Temperature)
 *         int update_baseNode[5]  # should be = ndims
 *         int CACHE = 0             # <<<<<<<<<<<<<<
 * 
 *     vec[0] = t_e
 */
  __pyx_v_CACHE = 0;

  /* "hot.pyx":298
 *         int CACHE = 0
 * 
 *     vec[0] = t_e             # <<<<<<<<<<<<<<
 *     vec[1] = t_bb
 *     vec[2] = tau
 */
  (__pyx_v_vec[0]) = __pyx_v_t_e;

  /* "hot.pyx":299
 * 
 *     vec[0] = t_e
 *     vec[1] = t_bb             # <<<<<<<<<<<<<<
 *     vec[2] = tau
 *     vec[3] = mu
 */
  (__pyx_v_vec[1]) = __pyx_v_t_bb;

  /* "hot.pyx":300
 *     vec[0] = t_e
 *     vec[1] = t_bb
 *     vec[2] = tau             # <<<<<<<<<<<<<<
 *     vec[3] = mu
 *     vec[4] = E
 */
  (__pyx_v_vec[2]) = __pyx_v_tau;

  /* "hot.pyx":301
 *     vec[1] = t_bb
 *     vec[2] = tau
 *     vec[3] = mu             # <<<<<<<<<<<<<<
 *     vec[4] = E
 * 
 */
  (__pyx_v_vec[3]) = __pyx_v_mu;

  /* "hot.pyx":302
 *     vec[2] = tau
 *     vec[3] = mu
 *     vec[4] = E             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_vec[4]) = __pyx_v_E;

  /* "hot.pyx":340
 *     #printf("\nVEC[1]: %f", VEC[1])
 * 
 *     while i < D.p.ndims:             # <<<<<<<<<<<<<<
 *         # if parallel == 31:
 *         # printf("\nDimension: %d", <int>i)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_D->p->ndims) != 0);
    if (!__pyx_t_1) break;

    /* "hot.pyx":343
 *         # if parallel == 31:
 *         # printf("\nDimension: %d", <int>i)
 *         update_baseNode[i] = 0             # <<<<<<<<<<<<<<
 *         if vec[i] < node_vals[2*i] and BN[i] != 0:
 *             # if parallel == 31:
 */
    (__pyx_v_update_baseNode[__pyx_v_i]) = 0;

    /* "hot.pyx":344
 *         # printf("\nDimension: %d", <int>i)
 *         update_baseNode[i] = 0
 *         if vec[i] < node_vals[2*i] and BN[i] != 0:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 1: %d", <int>i)
 */
    __pyx_t_2 = (((__pyx_v_vec[__pyx_v_i]) < (__pyx_v_node_vals[(2 * __pyx_v_i)])) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_BN[__pyx_v_i]) != 0) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "hot.pyx":347
 *             # if parallel == 31:
 *             # printf("\nExecute block 1: %d", <int>i)
 *             update_baseNode[i] = 1             # <<<<<<<<<<<<<<
 *             while vec[i] < D.p.params[i][BN[i] + 1]:
 *                 # if parallel == 31:
 */
      (__pyx_v_update_baseNode[__pyx_v_i]) = 1;

      /* "hot.pyx":348
 *             # printf("\nExecute block 1: %d", <int>i)
 *             update_baseNode[i] = 1
 *             while vec[i] < D.p.params[i][BN[i] + 1]:             # <<<<<<<<<<<<<<
 *                 # if parallel == 31:
 *                 #     printf("\n!")
 */
      while (1) {
        __pyx_t_1 = (((__pyx_v_vec[__pyx_v_i]) < ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])) != 0);
        if (!__pyx_t_1) break;

        /* "hot.pyx":353
 *                 #     printf("\nvec i: %.8e", vec[i])
 *                 #     printf("\nBase node: %d", <int>BN[i])
 *                 if BN[i] > 0:             # <<<<<<<<<<<<<<
 *                     BN[i] -= 1
 *                 elif vec[i] <= D.p.params[i][0]:
 */
        __pyx_t_1 = (((__pyx_v_BN[__pyx_v_i]) > 0) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":354
 *                 #     printf("\nBase node: %d", <int>BN[i])
 *                 if BN[i] > 0:
 *                     BN[i] -= 1             # <<<<<<<<<<<<<<
 *                 elif vec[i] <= D.p.params[i][0]:
 *                     vec[i] = D.p.params[i][0]
 */
          __pyx_t_3 = __pyx_v_i;
          (__pyx_v_BN[__pyx_t_3]) = ((__pyx_v_BN[__pyx_t_3]) - 1);

          /* "hot.pyx":353
 *                 #     printf("\nvec i: %.8e", vec[i])
 *                 #     printf("\nBase node: %d", <int>BN[i])
 *                 if BN[i] > 0:             # <<<<<<<<<<<<<<
 *                     BN[i] -= 1
 *                 elif vec[i] <= D.p.params[i][0]:
 */
          goto __pyx_L10;
        }

        /* "hot.pyx":355
 *                 if BN[i] > 0:
 *                     BN[i] -= 1
 *                 elif vec[i] <= D.p.params[i][0]:             # <<<<<<<<<<<<<<
 *                     vec[i] = D.p.params[i][0]
 *                     break
 */
        __pyx_t_1 = (((__pyx_v_vec[__pyx_v_i]) <= ((__pyx_v_D->p->params[__pyx_v_i])[0])) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":356
 *                     BN[i] -= 1
 *                 elif vec[i] <= D.p.params[i][0]:
 *                     vec[i] = D.p.params[i][0]             # <<<<<<<<<<<<<<
 *                     break
 *                 elif BN[i] == 0:
 */
          (__pyx_v_vec[__pyx_v_i]) = ((__pyx_v_D->p->params[__pyx_v_i])[0]);

          /* "hot.pyx":357
 *                 elif vec[i] <= D.p.params[i][0]:
 *                     vec[i] = D.p.params[i][0]
 *                     break             # <<<<<<<<<<<<<<
 *                 elif BN[i] == 0:
 *                     break
 */
          goto __pyx_L9_break;

          /* "hot.pyx":355
 *                 if BN[i] > 0:
 *                     BN[i] -= 1
 *                 elif vec[i] <= D.p.params[i][0]:             # <<<<<<<<<<<<<<
 *                     vec[i] = D.p.params[i][0]
 *                     break
 */
        }

        /* "hot.pyx":358
 *                     vec[i] = D.p.params[i][0]
 *                     break
 *                 elif BN[i] == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
        __pyx_t_1 = (((__pyx_v_BN[__pyx_v_i]) == 0) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":359
 *                     break
 *                 elif BN[i] == 0:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]
 */
          goto __pyx_L9_break;

          /* "hot.pyx":358
 *                     vec[i] = D.p.params[i][0]
 *                     break
 *                 elif BN[i] == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
        }
        __pyx_L10:;
      }
      __pyx_L9_break:;

      /* "hot.pyx":361
 *                     break
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             node_vals[2*i + 1] = D.p.params[i][BN[i] + 2]
 * 
 */
      (__pyx_v_node_vals[(2 * __pyx_v_i)]) = ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]);

      /* "hot.pyx":362
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]
 *             node_vals[2*i + 1] = D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 * 
 *             # if parallel == 31:
 */
      (__pyx_v_node_vals[((2 * __pyx_v_i) + 1)]) = ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)]);

      /* "hot.pyx":344
 *         # printf("\nDimension: %d", <int>i)
 *         update_baseNode[i] = 0
 *         if vec[i] < node_vals[2*i] and BN[i] != 0:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 1: %d", <int>i)
 */
      goto __pyx_L5;
    }

    /* "hot.pyx":367
 *             # printf("\nEnd Block 1: %d", <int>i)
 * 
 *         elif vec[i] > node_vals[2*i + 1] and BN[i] != D.p.N[i] - 4: # I believe this has to do with the cubic interpolation points, so this remains 4             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 2: %d", <int>i)
 */
    __pyx_t_2 = (((__pyx_v_vec[__pyx_v_i]) > (__pyx_v_node_vals[((2 * __pyx_v_i) + 1)])) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_BN[__pyx_v_i]) != ((__pyx_v_D->p->N[__pyx_v_i]) - 4)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_1) {

      /* "hot.pyx":370
 *             # if parallel == 31:
 *             # printf("\nExecute block 2: %d", <int>i)
 *             update_baseNode[i] = 1             # <<<<<<<<<<<<<<
 *             while vec[i] > D.p.params[i][BN[i] + 2]:
 *                 if BN[i] < D.p.N[i] - 4:
 */
      (__pyx_v_update_baseNode[__pyx_v_i]) = 1;

      /* "hot.pyx":371
 *             # printf("\nExecute block 2: %d", <int>i)
 *             update_baseNode[i] = 1
 *             while vec[i] > D.p.params[i][BN[i] + 2]:             # <<<<<<<<<<<<<<
 *                 if BN[i] < D.p.N[i] - 4:
 *                     BN[i] += 1
 */
      while (1) {
        __pyx_t_1 = (((__pyx_v_vec[__pyx_v_i]) > ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])) != 0);
        if (!__pyx_t_1) break;

        /* "hot.pyx":372
 *             update_baseNode[i] = 1
 *             while vec[i] > D.p.params[i][BN[i] + 2]:
 *                 if BN[i] < D.p.N[i] - 4:             # <<<<<<<<<<<<<<
 *                     BN[i] += 1
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:
 */
        __pyx_t_1 = (((__pyx_v_BN[__pyx_v_i]) < ((__pyx_v_D->p->N[__pyx_v_i]) - 4)) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":373
 *             while vec[i] > D.p.params[i][BN[i] + 2]:
 *                 if BN[i] < D.p.N[i] - 4:
 *                     BN[i] += 1             # <<<<<<<<<<<<<<
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 */
          __pyx_t_3 = __pyx_v_i;
          (__pyx_v_BN[__pyx_t_3]) = ((__pyx_v_BN[__pyx_t_3]) + 1);

          /* "hot.pyx":372
 *             update_baseNode[i] = 1
 *             while vec[i] > D.p.params[i][BN[i] + 2]:
 *                 if BN[i] < D.p.N[i] - 4:             # <<<<<<<<<<<<<<
 *                     BN[i] += 1
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:
 */
          goto __pyx_L15;
        }

        /* "hot.pyx":374
 *                 if BN[i] < D.p.N[i] - 4:
 *                     BN[i] += 1
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:             # <<<<<<<<<<<<<<
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 *                     break
 */
        __pyx_t_1 = (((__pyx_v_vec[__pyx_v_i]) >= ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_D->p->N[__pyx_v_i]) - 1)])) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":375
 *                     BN[i] += 1
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]             # <<<<<<<<<<<<<<
 *                     break
 *                 elif BN[i] == D.p.N[i] - 4:
 */
          (__pyx_v_vec[__pyx_v_i]) = ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_D->p->N[__pyx_v_i]) - 1)]);

          /* "hot.pyx":376
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 *                     break             # <<<<<<<<<<<<<<
 *                 elif BN[i] == D.p.N[i] - 4:
 *                     break
 */
          goto __pyx_L14_break;

          /* "hot.pyx":374
 *                 if BN[i] < D.p.N[i] - 4:
 *                     BN[i] += 1
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:             # <<<<<<<<<<<<<<
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 *                     break
 */
        }

        /* "hot.pyx":377
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 *                     break
 *                 elif BN[i] == D.p.N[i] - 4:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
        __pyx_t_1 = (((__pyx_v_BN[__pyx_v_i]) == ((__pyx_v_D->p->N[__pyx_v_i]) - 4)) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":378
 *                     break
 *                 elif BN[i] == D.p.N[i] - 4:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]
 */
          goto __pyx_L14_break;

          /* "hot.pyx":377
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 *                     break
 *                 elif BN[i] == D.p.N[i] - 4:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
        }
        __pyx_L15:;
      }
      __pyx_L14_break:;

      /* "hot.pyx":380
 *                     break
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             node_vals[2*i + 1] = D.p.params[i][BN[i] + 2]
 * 
 */
      (__pyx_v_node_vals[(2 * __pyx_v_i)]) = ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]);

      /* "hot.pyx":381
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]
 *             node_vals[2*i + 1] = D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 * 
 *             # if parallel == 31:
 */
      (__pyx_v_node_vals[((2 * __pyx_v_i) + 1)]) = ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)]);

      /* "hot.pyx":367
 *             # printf("\nEnd Block 1: %d", <int>i)
 * 
 *         elif vec[i] > node_vals[2*i + 1] and BN[i] != D.p.N[i] - 4: # I believe this has to do with the cubic interpolation points, so this remains 4             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 2: %d", <int>i)
 */
    }
    __pyx_L5:;

    /* "hot.pyx":389
 *         # printf("\nTry block 3: %d", <int>i)
 * 
 *         if V_CACHE[i] != vec[i] or update_baseNode[i] == 1:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 3: %d", <int>i)
 */
    __pyx_t_2 = (((__pyx_v_V_CACHE[__pyx_v_i]) != (__pyx_v_vec[__pyx_v_i])) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_update_baseNode[__pyx_v_i]) == 1) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L17_bool_binop_done:;
    if (__pyx_t_1) {

      /* "hot.pyx":392
 *             # if parallel == 31:
 *             # printf("\nExecute block 3: %d", <int>i)
 *             ii = 4*i             # <<<<<<<<<<<<<<
 *             DIFF[ii] = vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 2]
 */
      __pyx_v_ii = (4 * __pyx_v_i);

      /* "hot.pyx":393
 *             # printf("\nExecute block 3: %d", <int>i)
 *             ii = 4*i
 *             DIFF[ii] = vec[i] - D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 2]
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_DIFF[__pyx_v_ii]) = ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]));

      /* "hot.pyx":394
 *             ii = 4*i
 *             DIFF[ii] = vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = __pyx_v_ii;
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":395
 *             DIFF[ii] = vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 2]
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             DIFF[ii + 1] = vec[i] - D.p.params[i][BN[i]]
 */
      __pyx_t_3 = __pyx_v_ii;
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":397
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 *             DIFF[ii + 1] = vec[i] - D.p.params[i][BN[i]]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 2]
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_DIFF[(__pyx_v_ii + 1)]) = ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]));

      /* "hot.pyx":398
 * 
 *             DIFF[ii + 1] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 1);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":399
 *             DIFF[ii + 1] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 2]
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             DIFF[ii + 2] = vec[i] - D.p.params[i][BN[i]]
 */
      __pyx_t_3 = (__pyx_v_ii + 1);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":401
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 *             DIFF[ii + 2] = vec[i] - D.p.params[i][BN[i]]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_DIFF[(__pyx_v_ii + 2)]) = ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]));

      /* "hot.pyx":402
 * 
 *             DIFF[ii + 2] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 2);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])));

      /* "hot.pyx":403
 *             DIFF[ii + 2] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             DIFF[ii + 3] = vec[i] - D.p.params[i][BN[i]]
 */
      __pyx_t_3 = (__pyx_v_ii + 2);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":405
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 *             DIFF[ii + 3] = vec[i] - D.p.params[i][BN[i]]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 2]
 */
      (__pyx_v_DIFF[(__pyx_v_ii + 3)]) = ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]));

      /* "hot.pyx":406
 * 
 *             DIFF[ii + 3] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 2]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 3);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])));

      /* "hot.pyx":407
 *             DIFF[ii + 3] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 * 
 *             # printf("\nupdating V_CACHE")
 */
      __pyx_t_3 = (__pyx_v_ii + 3);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":412
 * 
 * 
 *             V_CACHE[i] = vec[i]             # <<<<<<<<<<<<<<
 * 
 *             # if parallel == 31:
 */
      (__pyx_v_V_CACHE[__pyx_v_i]) = (__pyx_v_vec[__pyx_v_i]);

      /* "hot.pyx":389
 *         # printf("\nTry block 3: %d", <int>i)
 * 
 *         if V_CACHE[i] != vec[i] or update_baseNode[i] == 1:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 3: %d", <int>i)
 */
    }

    /* "hot.pyx":420
 *         #     printf("\nTry block 4: %d", <int>i)
 * 
 *         if update_baseNode[i] == 1:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 4: %d", <int>i)
 */
    __pyx_t_1 = (((__pyx_v_update_baseNode[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_1) {

      /* "hot.pyx":425
 *             # printf("i=%d, ", <int>i)
 *             # printf("D.p.params[i][BN[i]]: %.2e\n", D.p.params[i][BN[i]])
 *             CACHE = 1             # <<<<<<<<<<<<<<
 *             SPACE[ii] = 1.0 / (D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 1])
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 2]
 */
      __pyx_v_CACHE = 1;

      /* "hot.pyx":426
 *             # printf("D.p.params[i][BN[i]]: %.2e\n", D.p.params[i][BN[i]])
 *             CACHE = 1
 *             SPACE[ii] = 1.0 / (D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 1])             # <<<<<<<<<<<<<<
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 2]
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_SPACE[__pyx_v_ii]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])));

      /* "hot.pyx":427
 *             CACHE = 1
 *             SPACE[ii] = 1.0 / (D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 1])
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = __pyx_v_ii;
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":428
 *             SPACE[ii] = 1.0 / (D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 1])
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 2]
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             SPACE[ii + 1] = 1.0 / (D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i]])
 */
      __pyx_t_3 = __pyx_v_ii;
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":430
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 3]
 * 
 *             SPACE[ii + 1] = 1.0 / (D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i]])             # <<<<<<<<<<<<<<
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 2]
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_SPACE[(__pyx_v_ii + 1)]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])])));

      /* "hot.pyx":431
 * 
 *             SPACE[ii + 1] = 1.0 / (D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i]])
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 1);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":432
 *             SPACE[ii + 1] = 1.0 / (D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i]])
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 2]
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             SPACE[ii + 2] = 1.0 / (D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i]])
 */
      __pyx_t_3 = (__pyx_v_ii + 1);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":434
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 3]
 * 
 *             SPACE[ii + 2] = 1.0 / (D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i]])             # <<<<<<<<<<<<<<
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 1]
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_SPACE[(__pyx_v_ii + 2)]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])])));

      /* "hot.pyx":435
 * 
 *             SPACE[ii + 2] = 1.0 / (D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i]])
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 2);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])));

      /* "hot.pyx":436
 *             SPACE[ii + 2] = 1.0 / (D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i]])
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 1]
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             SPACE[ii + 3] = 1.0 / (D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i]])
 */
      __pyx_t_3 = (__pyx_v_ii + 2);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":438
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 3]
 * 
 *             SPACE[ii + 3] = 1.0 / (D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i]])             # <<<<<<<<<<<<<<
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 1]
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 2]
 */
      (__pyx_v_SPACE[(__pyx_v_ii + 3)]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])])));

      /* "hot.pyx":439
 * 
 *             SPACE[ii + 3] = 1.0 / (D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i]])
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 2]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 3);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])));

      /* "hot.pyx":440
 *             SPACE[ii + 3] = 1.0 / (D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i]])
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 1]
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 * 
 *             # if parallel == 31:
 */
      __pyx_t_3 = (__pyx_v_ii + 3);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":420
 *         #     printf("\nTry block 4: %d", <int>i)
 * 
 *         if update_baseNode[i] == 1:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 4: %d", <int>i)
 */
    }

    /* "hot.pyx":457
 *         # printf("SPACE[ii+3]: %.2e\n", SPACE[ii+3])
 * 
 *         i += 1             # <<<<<<<<<<<<<<
 * 
 *     # printf("Diagnostics: 2\n")
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "hot.pyx":470
 * 
 *     cdef size_t j, k, l, m, INDEX, II, JJ, KK, LL
 *     cdef double *address = NULL             # <<<<<<<<<<<<<<
 * 
 *     # (4) Here again, I need to iterate over an additional dimension.
 */
  __pyx_v_address = NULL;

  /* "hot.pyx":510
 *     # clock_gettime(CLOCK_REALTIME, &ts)
 * 
 *     for i in range(4):             # <<<<<<<<<<<<<<
 *         II = i * D.p.BLOCKS[0]
 *         for j in range(4):
 */
  for (__pyx_t_3 = 0; __pyx_t_3 < 4; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "hot.pyx":511
 * 
 *     for i in range(4):
 *         II = i * D.p.BLOCKS[0]             # <<<<<<<<<<<<<<
 *         for j in range(4):
 *             JJ = j * D.p.BLOCKS[1]
 */
    __pyx_v_II = (__pyx_v_i * (__pyx_v_D->p->BLOCKS[0]));

    /* "hot.pyx":512
 *     for i in range(4):
 *         II = i * D.p.BLOCKS[0]
 *         for j in range(4):             # <<<<<<<<<<<<<<
 *             JJ = j * D.p.BLOCKS[1]
 *             for k in range(4):
 */
    for (__pyx_t_4 = 0; __pyx_t_4 < 4; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;

      /* "hot.pyx":513
 *         II = i * D.p.BLOCKS[0]
 *         for j in range(4):
 *             JJ = j * D.p.BLOCKS[1]             # <<<<<<<<<<<<<<
 *             for k in range(4):
 *                 KK = k * D.p.BLOCKS[2]
 */
      __pyx_v_JJ = (__pyx_v_j * (__pyx_v_D->p->BLOCKS[1]));

      /* "hot.pyx":514
 *         for j in range(4):
 *             JJ = j * D.p.BLOCKS[1]
 *             for k in range(4):             # <<<<<<<<<<<<<<
 *                 KK = k * D.p.BLOCKS[2]
 *                 for l in range(4):
 */
      for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=1) {
        __pyx_v_k = __pyx_t_5;

        /* "hot.pyx":515
 *             JJ = j * D.p.BLOCKS[1]
 *             for k in range(4):
 *                 KK = k * D.p.BLOCKS[2]             # <<<<<<<<<<<<<<
 *                 for l in range(4):
 *                     LL = l * D.p.BLOCKS[3]
 */
        __pyx_v_KK = (__pyx_v_k * (__pyx_v_D->p->BLOCKS[2]));

        /* "hot.pyx":516
 *             for k in range(4):
 *                 KK = k * D.p.BLOCKS[2]
 *                 for l in range(4):             # <<<<<<<<<<<<<<
 *                     LL = l * D.p.BLOCKS[3]
 *                     for m in range(4):
 */
        for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
          __pyx_v_l = __pyx_t_6;

          /* "hot.pyx":517
 *                 KK = k * D.p.BLOCKS[2]
 *                 for l in range(4):
 *                     LL = l * D.p.BLOCKS[3]             # <<<<<<<<<<<<<<
 *                     for m in range(4):
 *                         address = D.p.I + (BN[0] + i) * D.p.S[0] + (BN[1] + j) * D.p.S[1] + (BN[2] + k) * D.p.S[2] + (BN[3] + l) * D.p.S[3] + BN[4] + m
 */
          __pyx_v_LL = (__pyx_v_l * (__pyx_v_D->p->BLOCKS[3]));

          /* "hot.pyx":518
 *                 for l in range(4):
 *                     LL = l * D.p.BLOCKS[3]
 *                     for m in range(4):             # <<<<<<<<<<<<<<
 *                         address = D.p.I + (BN[0] + i) * D.p.S[0] + (BN[1] + j) * D.p.S[1] + (BN[2] + k) * D.p.S[2] + (BN[3] + l) * D.p.S[3] + BN[4] + m
 * 
 */
          for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
            __pyx_v_m = __pyx_t_7;

            /* "hot.pyx":519
 *                     LL = l * D.p.BLOCKS[3]
 *                     for m in range(4):
 *                         address = D.p.I + (BN[0] + i) * D.p.S[0] + (BN[1] + j) * D.p.S[1] + (BN[2] + k) * D.p.S[2] + (BN[3] + l) * D.p.S[3] + BN[4] + m             # <<<<<<<<<<<<<<
 * 
 *                         # printf("address %p\n", address)
 */
            __pyx_v_address = ((((((__pyx_v_D->p->I + (((__pyx_v_BN[0]) + __pyx_v_i) * (__pyx_v_D->p->S[0]))) + (((__pyx_v_BN[1]) + __pyx_v_j) * (__pyx_v_D->p->S[1]))) + (((__pyx_v_BN[2]) + __pyx_v_k) * (__pyx_v_D->p->S[2]))) + (((__pyx_v_BN[3]) + __pyx_v_l) * (__pyx_v_D->p->S[3]))) + (__pyx_v_BN[4])) + __pyx_v_m);

            /* "hot.pyx":529
 * 
 * 
 *                         temp = DIFF[i] * DIFF[4 + j] * DIFF[8 + k] * DIFF[12 + l] * DIFF[16 + m]             # <<<<<<<<<<<<<<
 *                         temp *= SPACE[i] * SPACE[4 + j] * SPACE[8 + k] * SPACE[12 + l] * SPACE[16 + m]
 *                         # printf('temp:%f, ',temp)
 */
            __pyx_v_temp = (((((__pyx_v_DIFF[__pyx_v_i]) * (__pyx_v_DIFF[(4 + __pyx_v_j)])) * (__pyx_v_DIFF[(8 + __pyx_v_k)])) * (__pyx_v_DIFF[(12 + __pyx_v_l)])) * (__pyx_v_DIFF[(16 + __pyx_v_m)]));

            /* "hot.pyx":530
 * 
 *                         temp = DIFF[i] * DIFF[4 + j] * DIFF[8 + k] * DIFF[12 + l] * DIFF[16 + m]
 *                         temp *= SPACE[i] * SPACE[4 + j] * SPACE[8 + k] * SPACE[12 + l] * SPACE[16 + m]             # <<<<<<<<<<<<<<
 *                         # printf('temp:%f, ',temp)
 *                         INDEX = II + JJ + KK + LL + m
 */
            __pyx_v_temp = (__pyx_v_temp * (((((__pyx_v_SPACE[__pyx_v_i]) * (__pyx_v_SPACE[(4 + __pyx_v_j)])) * (__pyx_v_SPACE[(8 + __pyx_v_k)])) * (__pyx_v_SPACE[(12 + __pyx_v_l)])) * (__pyx_v_SPACE[(16 + __pyx_v_m)])));

            /* "hot.pyx":532
 *                         temp *= SPACE[i] * SPACE[4 + j] * SPACE[8 + k] * SPACE[12 + l] * SPACE[16 + m]
 *                         # printf('temp:%f, ',temp)
 *                         INDEX = II + JJ + KK + LL + m             # <<<<<<<<<<<<<<
 *                         if CACHE == 1:
 *                             I_CACHE[INDEX] = address[0]
 */
            __pyx_v_INDEX = ((((__pyx_v_II + __pyx_v_JJ) + __pyx_v_KK) + __pyx_v_LL) + __pyx_v_m);

            /* "hot.pyx":533
 *                         # printf('temp:%f, ',temp)
 *                         INDEX = II + JJ + KK + LL + m
 *                         if CACHE == 1:             # <<<<<<<<<<<<<<
 *                             I_CACHE[INDEX] = address[0]
 *                         # printf('%f\n', I)
 */
            __pyx_t_1 = ((__pyx_v_CACHE == 1) != 0);
            if (__pyx_t_1) {

              /* "hot.pyx":534
 *                         INDEX = II + JJ + KK + LL + m
 *                         if CACHE == 1:
 *                             I_CACHE[INDEX] = address[0]             # <<<<<<<<<<<<<<
 *                         # printf('%f\n', I)
 *                         I += temp * I_CACHE[INDEX]
 */
              (__pyx_v_I_CACHE[__pyx_v_INDEX]) = (__pyx_v_address[0]);

              /* "hot.pyx":533
 *                         # printf('temp:%f, ',temp)
 *                         INDEX = II + JJ + KK + LL + m
 *                         if CACHE == 1:             # <<<<<<<<<<<<<<
 *                             I_CACHE[INDEX] = address[0]
 *                         # printf('%f\n', I)
 */
            }

            /* "hot.pyx":536
 *                             I_CACHE[INDEX] = address[0]
 *                         # printf('%f\n', I)
 *                         I += temp * I_CACHE[INDEX]             # <<<<<<<<<<<<<<
 * 
 *                         #printf('i=%d,j=%d,k=%d,l=%d,m=%d, ', <int>i, <int>j, <int>k, <int>l, <int>m)
 */
            __pyx_v_I = (__pyx_v_I + (__pyx_v_temp * (__pyx_v_I_CACHE[__pyx_v_INDEX])));
          }
        }
      }
    }
  }

  /* "hot.pyx":544
 *                         #printf('dI = %0.2e\n', temp * I_CACHE[INDEX])
 * 
 *     if I < 0.0:             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  __pyx_t_1 = ((__pyx_v_I < 0.0) != 0);
  if (__pyx_t_1) {

    /* "hot.pyx":545
 * 
 *     if I < 0.0:
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0.0;
    goto __pyx_L0;

    /* "hot.pyx":544
 *                         #printf('dI = %0.2e\n', temp * I_CACHE[INDEX])
 * 
 *     if I < 0.0:             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */
  }

  /* "hot.pyx":254
 * #                       void *const data) nogil:
 * 
 * cdef double eval_hot(size_t THREAD,             # <<<<<<<<<<<<<<
 *                       double E,
 *                       double mu,
 */

  /* function exit code */
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "hot.pyx":555
 * 
 * 
 * cdef double eval_hot_faster(size_t THREAD,             # <<<<<<<<<<<<<<
 *                       double E,
 *                       double mu,
 */

static double __pyx_f_3hot_eval_hot_faster(size_t __pyx_v_THREAD, double __pyx_v_E, double __pyx_v_mu, double __pyx_v_tau, double __pyx_v_t_bb, double __pyx_v_t_e, void *const __pyx_v_data) {
  __pyx_t_3hot_DATA *__pyx_v_D;
  size_t __pyx_v_i;
  size_t __pyx_v_ii;
  double __pyx_v_I;
  double *__pyx_v_node_vals;
  size_t *__pyx_v_BN;
  double *__pyx_v_SPACE;
  double *__pyx_v_DIFF;
  double *__pyx_v_I_CACHE;
  double *__pyx_v_V_CACHE;
  double __pyx_v_vec[5];
  int __pyx_v_update_baseNode[5];
  int __pyx_v_CACHE;
  size_t __pyx_v_j;
  size_t __pyx_v_k;
  size_t __pyx_v_l;
  size_t __pyx_v_m;
  double *__pyx_v_address;
  int __pyx_v_iterator;
  int __pyx_v_iteration_size;
  double *__pyx_v_temp2;
  double __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;

  /* "hot.pyx":580
 * 
 *     #cdef timespec ts
 *     clock_gettime(CLOCK_REALTIME, &ts)             # <<<<<<<<<<<<<<
 * 
 *     cdef DATA *D = <DATA*> data
 */
  (void)(clock_gettime(CLOCK_REALTIME, (&__pyx_v_3hot_ts)));

  /* "hot.pyx":582
 *     clock_gettime(CLOCK_REALTIME, &ts)
 * 
 *     cdef DATA *D = <DATA*> data             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
  __pyx_v_D = ((__pyx_t_3hot_DATA *)__pyx_v_data);

  /* "hot.pyx":585
 * 
 *     cdef:
 *         size_t i = 0, ii             # <<<<<<<<<<<<<<
 *         double I = 0.0, temp
 *         double *node_vals = D.acc.node_vals[THREAD]
 */
  __pyx_v_i = 0;

  /* "hot.pyx":586
 *     cdef:
 *         size_t i = 0, ii
 *         double I = 0.0, temp             # <<<<<<<<<<<<<<
 *         double *node_vals = D.acc.node_vals[THREAD]
 *         size_t *BN = D.acc.BN[THREAD]
 */
  __pyx_v_I = 0.0;

  /* "hot.pyx":587
 *         size_t i = 0, ii
 *         double I = 0.0, temp
 *         double *node_vals = D.acc.node_vals[THREAD]             # <<<<<<<<<<<<<<
 *         size_t *BN = D.acc.BN[THREAD]
 *         double *SPACE = D.acc.SPACE[THREAD]
 */
  __pyx_v_node_vals = (__pyx_v_D->acc.node_vals[__pyx_v_THREAD]);

  /* "hot.pyx":588
 *         double I = 0.0, temp
 *         double *node_vals = D.acc.node_vals[THREAD]
 *         size_t *BN = D.acc.BN[THREAD]             # <<<<<<<<<<<<<<
 *         double *SPACE = D.acc.SPACE[THREAD]
 *         double *DIFF = D.acc.DIFF[THREAD]
 */
  __pyx_v_BN = (__pyx_v_D->acc.BN[__pyx_v_THREAD]);

  /* "hot.pyx":589
 *         double *node_vals = D.acc.node_vals[THREAD]
 *         size_t *BN = D.acc.BN[THREAD]
 *         double *SPACE = D.acc.SPACE[THREAD]             # <<<<<<<<<<<<<<
 *         double *DIFF = D.acc.DIFF[THREAD]
 *         double *I_CACHE = D.acc.INTENSITY_CACHE[THREAD]
 */
  __pyx_v_SPACE = (__pyx_v_D->acc.SPACE[__pyx_v_THREAD]);

  /* "hot.pyx":590
 *         size_t *BN = D.acc.BN[THREAD]
 *         double *SPACE = D.acc.SPACE[THREAD]
 *         double *DIFF = D.acc.DIFF[THREAD]             # <<<<<<<<<<<<<<
 *         double *I_CACHE = D.acc.INTENSITY_CACHE[THREAD]
 *         double *V_CACHE = D.acc.VEC_CACHE[THREAD]
 */
  __pyx_v_DIFF = (__pyx_v_D->acc.DIFF[__pyx_v_THREAD]);

  /* "hot.pyx":591
 *         double *SPACE = D.acc.SPACE[THREAD]
 *         double *DIFF = D.acc.DIFF[THREAD]
 *         double *I_CACHE = D.acc.INTENSITY_CACHE[THREAD]             # <<<<<<<<<<<<<<
 *         double *V_CACHE = D.acc.VEC_CACHE[THREAD]
 *         double vec[5] # should be = ndims
 */
  __pyx_v_I_CACHE = (__pyx_v_D->acc.INTENSITY_CACHE[__pyx_v_THREAD]);

  /* "hot.pyx":592
 *         double *DIFF = D.acc.DIFF[THREAD]
 *         double *I_CACHE = D.acc.INTENSITY_CACHE[THREAD]
 *         double *V_CACHE = D.acc.VEC_CACHE[THREAD]             # <<<<<<<<<<<<<<
 *         double vec[5] # should be = ndims
 *         # double E_eff = k_B_over_keV * pow(10.0, VEC[0])
 */
  __pyx_v_V_CACHE = (__pyx_v_D->acc.VEC_CACHE[__pyx_v_THREAD]);

  /* "hot.pyx":597
 *         # double E_eff = k_B_over_keV * pow(10.0, Temperature)
 *         int update_baseNode[5]  # should be = ndims
 *         int CACHE = 0             # <<<<<<<<<<<<<<
 * 
 *     vec[0] = t_e
 */
  __pyx_v_CACHE = 0;

  /* "hot.pyx":599
 *         int CACHE = 0
 * 
 *     vec[0] = t_e             # <<<<<<<<<<<<<<
 *     vec[1] = t_bb
 *     vec[2] = tau
 */
  (__pyx_v_vec[0]) = __pyx_v_t_e;

  /* "hot.pyx":600
 * 
 *     vec[0] = t_e
 *     vec[1] = t_bb             # <<<<<<<<<<<<<<
 *     vec[2] = tau
 *     vec[3] = mu
 */
  (__pyx_v_vec[1]) = __pyx_v_t_bb;

  /* "hot.pyx":601
 *     vec[0] = t_e
 *     vec[1] = t_bb
 *     vec[2] = tau             # <<<<<<<<<<<<<<
 *     vec[3] = mu
 *     vec[4] = E
 */
  (__pyx_v_vec[2]) = __pyx_v_tau;

  /* "hot.pyx":602
 *     vec[1] = t_bb
 *     vec[2] = tau
 *     vec[3] = mu             # <<<<<<<<<<<<<<
 *     vec[4] = E
 * 
 */
  (__pyx_v_vec[3]) = __pyx_v_mu;

  /* "hot.pyx":603
 *     vec[2] = tau
 *     vec[3] = mu
 *     vec[4] = E             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_vec[4]) = __pyx_v_E;

  /* "hot.pyx":641
 *     #printf("\nVEC[1]: %f", VEC[1])
 * 
 *     while i < D.p.ndims:             # <<<<<<<<<<<<<<
 *         # if parallel == 31:
 *         # printf("\nDimension: %d", <int>i)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_D->p->ndims) != 0);
    if (!__pyx_t_1) break;

    /* "hot.pyx":644
 *         # if parallel == 31:
 *         # printf("\nDimension: %d", <int>i)
 *         update_baseNode[i] = 0             # <<<<<<<<<<<<<<
 *         if vec[i] < node_vals[2*i] and BN[i] != 0:
 *             # if parallel == 31:
 */
    (__pyx_v_update_baseNode[__pyx_v_i]) = 0;

    /* "hot.pyx":645
 *         # printf("\nDimension: %d", <int>i)
 *         update_baseNode[i] = 0
 *         if vec[i] < node_vals[2*i] and BN[i] != 0:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 1: %d", <int>i)
 */
    __pyx_t_2 = (((__pyx_v_vec[__pyx_v_i]) < (__pyx_v_node_vals[(2 * __pyx_v_i)])) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_BN[__pyx_v_i]) != 0) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "hot.pyx":648
 *             # if parallel == 31:
 *             # printf("\nExecute block 1: %d", <int>i)
 *             update_baseNode[i] = 1             # <<<<<<<<<<<<<<
 *             while vec[i] < D.p.params[i][BN[i] + 1]:
 *                 # if parallel == 31:
 */
      (__pyx_v_update_baseNode[__pyx_v_i]) = 1;

      /* "hot.pyx":649
 *             # printf("\nExecute block 1: %d", <int>i)
 *             update_baseNode[i] = 1
 *             while vec[i] < D.p.params[i][BN[i] + 1]:             # <<<<<<<<<<<<<<
 *                 # if parallel == 31:
 *                 #     printf("\n!")
 */
      while (1) {
        __pyx_t_1 = (((__pyx_v_vec[__pyx_v_i]) < ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])) != 0);
        if (!__pyx_t_1) break;

        /* "hot.pyx":654
 *                 #     printf("\nvec i: %.8e", vec[i])
 *                 #     printf("\nBase node: %d", <int>BN[i])
 *                 if BN[i] > 0:             # <<<<<<<<<<<<<<
 *                     BN[i] -= 1
 *                 elif vec[i] <= D.p.params[i][0]:
 */
        __pyx_t_1 = (((__pyx_v_BN[__pyx_v_i]) > 0) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":655
 *                 #     printf("\nBase node: %d", <int>BN[i])
 *                 if BN[i] > 0:
 *                     BN[i] -= 1             # <<<<<<<<<<<<<<
 *                 elif vec[i] <= D.p.params[i][0]:
 *                     vec[i] = D.p.params[i][0]
 */
          __pyx_t_3 = __pyx_v_i;
          (__pyx_v_BN[__pyx_t_3]) = ((__pyx_v_BN[__pyx_t_3]) - 1);

          /* "hot.pyx":654
 *                 #     printf("\nvec i: %.8e", vec[i])
 *                 #     printf("\nBase node: %d", <int>BN[i])
 *                 if BN[i] > 0:             # <<<<<<<<<<<<<<
 *                     BN[i] -= 1
 *                 elif vec[i] <= D.p.params[i][0]:
 */
          goto __pyx_L10;
        }

        /* "hot.pyx":656
 *                 if BN[i] > 0:
 *                     BN[i] -= 1
 *                 elif vec[i] <= D.p.params[i][0]:             # <<<<<<<<<<<<<<
 *                     vec[i] = D.p.params[i][0]
 *                     break
 */
        __pyx_t_1 = (((__pyx_v_vec[__pyx_v_i]) <= ((__pyx_v_D->p->params[__pyx_v_i])[0])) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":657
 *                     BN[i] -= 1
 *                 elif vec[i] <= D.p.params[i][0]:
 *                     vec[i] = D.p.params[i][0]             # <<<<<<<<<<<<<<
 *                     break
 *                 elif BN[i] == 0:
 */
          (__pyx_v_vec[__pyx_v_i]) = ((__pyx_v_D->p->params[__pyx_v_i])[0]);

          /* "hot.pyx":658
 *                 elif vec[i] <= D.p.params[i][0]:
 *                     vec[i] = D.p.params[i][0]
 *                     break             # <<<<<<<<<<<<<<
 *                 elif BN[i] == 0:
 *                     break
 */
          goto __pyx_L9_break;

          /* "hot.pyx":656
 *                 if BN[i] > 0:
 *                     BN[i] -= 1
 *                 elif vec[i] <= D.p.params[i][0]:             # <<<<<<<<<<<<<<
 *                     vec[i] = D.p.params[i][0]
 *                     break
 */
        }

        /* "hot.pyx":659
 *                     vec[i] = D.p.params[i][0]
 *                     break
 *                 elif BN[i] == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
        __pyx_t_1 = (((__pyx_v_BN[__pyx_v_i]) == 0) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":660
 *                     break
 *                 elif BN[i] == 0:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]
 */
          goto __pyx_L9_break;

          /* "hot.pyx":659
 *                     vec[i] = D.p.params[i][0]
 *                     break
 *                 elif BN[i] == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
        }
        __pyx_L10:;
      }
      __pyx_L9_break:;

      /* "hot.pyx":662
 *                     break
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             node_vals[2*i + 1] = D.p.params[i][BN[i] + 2]
 * 
 */
      (__pyx_v_node_vals[(2 * __pyx_v_i)]) = ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]);

      /* "hot.pyx":663
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]
 *             node_vals[2*i + 1] = D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 * 
 *             # if parallel == 31:
 */
      (__pyx_v_node_vals[((2 * __pyx_v_i) + 1)]) = ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)]);

      /* "hot.pyx":645
 *         # printf("\nDimension: %d", <int>i)
 *         update_baseNode[i] = 0
 *         if vec[i] < node_vals[2*i] and BN[i] != 0:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 1: %d", <int>i)
 */
      goto __pyx_L5;
    }

    /* "hot.pyx":668
 *             # printf("\nEnd Block 1: %d", <int>i)
 * 
 *         elif vec[i] > node_vals[2*i + 1] and BN[i] != D.p.N[i] - 4: # I believe this has to do with the cubic interpolation points, so this remains 4             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 2: %d", <int>i)
 */
    __pyx_t_2 = (((__pyx_v_vec[__pyx_v_i]) > (__pyx_v_node_vals[((2 * __pyx_v_i) + 1)])) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_BN[__pyx_v_i]) != ((__pyx_v_D->p->N[__pyx_v_i]) - 4)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_1) {

      /* "hot.pyx":671
 *             # if parallel == 31:
 *             # printf("\nExecute block 2: %d", <int>i)
 *             update_baseNode[i] = 1             # <<<<<<<<<<<<<<
 *             while vec[i] > D.p.params[i][BN[i] + 2]:
 *                 if BN[i] < D.p.N[i] - 4:
 */
      (__pyx_v_update_baseNode[__pyx_v_i]) = 1;

      /* "hot.pyx":672
 *             # printf("\nExecute block 2: %d", <int>i)
 *             update_baseNode[i] = 1
 *             while vec[i] > D.p.params[i][BN[i] + 2]:             # <<<<<<<<<<<<<<
 *                 if BN[i] < D.p.N[i] - 4:
 *                     BN[i] += 1
 */
      while (1) {
        __pyx_t_1 = (((__pyx_v_vec[__pyx_v_i]) > ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])) != 0);
        if (!__pyx_t_1) break;

        /* "hot.pyx":673
 *             update_baseNode[i] = 1
 *             while vec[i] > D.p.params[i][BN[i] + 2]:
 *                 if BN[i] < D.p.N[i] - 4:             # <<<<<<<<<<<<<<
 *                     BN[i] += 1
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:
 */
        __pyx_t_1 = (((__pyx_v_BN[__pyx_v_i]) < ((__pyx_v_D->p->N[__pyx_v_i]) - 4)) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":674
 *             while vec[i] > D.p.params[i][BN[i] + 2]:
 *                 if BN[i] < D.p.N[i] - 4:
 *                     BN[i] += 1             # <<<<<<<<<<<<<<
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 */
          __pyx_t_3 = __pyx_v_i;
          (__pyx_v_BN[__pyx_t_3]) = ((__pyx_v_BN[__pyx_t_3]) + 1);

          /* "hot.pyx":673
 *             update_baseNode[i] = 1
 *             while vec[i] > D.p.params[i][BN[i] + 2]:
 *                 if BN[i] < D.p.N[i] - 4:             # <<<<<<<<<<<<<<
 *                     BN[i] += 1
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:
 */
          goto __pyx_L15;
        }

        /* "hot.pyx":675
 *                 if BN[i] < D.p.N[i] - 4:
 *                     BN[i] += 1
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:             # <<<<<<<<<<<<<<
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 *                     break
 */
        __pyx_t_1 = (((__pyx_v_vec[__pyx_v_i]) >= ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_D->p->N[__pyx_v_i]) - 1)])) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":676
 *                     BN[i] += 1
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]             # <<<<<<<<<<<<<<
 *                     break
 *                 elif BN[i] == D.p.N[i] - 4:
 */
          (__pyx_v_vec[__pyx_v_i]) = ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_D->p->N[__pyx_v_i]) - 1)]);

          /* "hot.pyx":677
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 *                     break             # <<<<<<<<<<<<<<
 *                 elif BN[i] == D.p.N[i] - 4:
 *                     break
 */
          goto __pyx_L14_break;

          /* "hot.pyx":675
 *                 if BN[i] < D.p.N[i] - 4:
 *                     BN[i] += 1
 *                 elif vec[i] >= D.p.params[i][D.p.N[i] - 1]:             # <<<<<<<<<<<<<<
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 *                     break
 */
        }

        /* "hot.pyx":678
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 *                     break
 *                 elif BN[i] == D.p.N[i] - 4:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
        __pyx_t_1 = (((__pyx_v_BN[__pyx_v_i]) == ((__pyx_v_D->p->N[__pyx_v_i]) - 4)) != 0);
        if (__pyx_t_1) {

          /* "hot.pyx":679
 *                     break
 *                 elif BN[i] == D.p.N[i] - 4:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]
 */
          goto __pyx_L14_break;

          /* "hot.pyx":678
 *                     vec[i] = D.p.params[i][D.p.N[i] - 1]
 *                     break
 *                 elif BN[i] == D.p.N[i] - 4:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
        }
        __pyx_L15:;
      }
      __pyx_L14_break:;

      /* "hot.pyx":681
 *                     break
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             node_vals[2*i + 1] = D.p.params[i][BN[i] + 2]
 * 
 */
      (__pyx_v_node_vals[(2 * __pyx_v_i)]) = ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]);

      /* "hot.pyx":682
 * 
 *             node_vals[2*i] = D.p.params[i][BN[i] + 1]
 *             node_vals[2*i + 1] = D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 * 
 *             # if parallel == 31:
 */
      (__pyx_v_node_vals[((2 * __pyx_v_i) + 1)]) = ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)]);

      /* "hot.pyx":668
 *             # printf("\nEnd Block 1: %d", <int>i)
 * 
 *         elif vec[i] > node_vals[2*i + 1] and BN[i] != D.p.N[i] - 4: # I believe this has to do with the cubic interpolation points, so this remains 4             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 2: %d", <int>i)
 */
    }
    __pyx_L5:;

    /* "hot.pyx":690
 *         # printf("\nTry block 3: %d", <int>i)
 * 
 *         if V_CACHE[i] != vec[i] or update_baseNode[i] == 1:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 3: %d", <int>i)
 */
    __pyx_t_2 = (((__pyx_v_V_CACHE[__pyx_v_i]) != (__pyx_v_vec[__pyx_v_i])) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_update_baseNode[__pyx_v_i]) == 1) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L17_bool_binop_done:;
    if (__pyx_t_1) {

      /* "hot.pyx":693
 *             # if parallel == 31:
 *             # printf("\nExecute block 3: %d", <int>i)
 *             ii = 4*i             # <<<<<<<<<<<<<<
 *             DIFF[ii] = vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 2]
 */
      __pyx_v_ii = (4 * __pyx_v_i);

      /* "hot.pyx":694
 *             # printf("\nExecute block 3: %d", <int>i)
 *             ii = 4*i
 *             DIFF[ii] = vec[i] - D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 2]
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_DIFF[__pyx_v_ii]) = ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]));

      /* "hot.pyx":695
 *             ii = 4*i
 *             DIFF[ii] = vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = __pyx_v_ii;
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":696
 *             DIFF[ii] = vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 2]
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             DIFF[ii + 1] = vec[i] - D.p.params[i][BN[i]]
 */
      __pyx_t_3 = __pyx_v_ii;
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":698
 *             DIFF[ii] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 *             DIFF[ii + 1] = vec[i] - D.p.params[i][BN[i]]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 2]
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_DIFF[(__pyx_v_ii + 1)]) = ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]));

      /* "hot.pyx":699
 * 
 *             DIFF[ii + 1] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 1);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":700
 *             DIFF[ii + 1] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 2]
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             DIFF[ii + 2] = vec[i] - D.p.params[i][BN[i]]
 */
      __pyx_t_3 = (__pyx_v_ii + 1);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":702
 *             DIFF[ii + 1] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 *             DIFF[ii + 2] = vec[i] - D.p.params[i][BN[i]]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_DIFF[(__pyx_v_ii + 2)]) = ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]));

      /* "hot.pyx":703
 * 
 *             DIFF[ii + 2] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 2);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])));

      /* "hot.pyx":704
 *             DIFF[ii + 2] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             DIFF[ii + 3] = vec[i] - D.p.params[i][BN[i]]
 */
      __pyx_t_3 = (__pyx_v_ii + 2);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":706
 *             DIFF[ii + 2] *= vec[i] - D.p.params[i][BN[i] + 3]
 * 
 *             DIFF[ii + 3] = vec[i] - D.p.params[i][BN[i]]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 2]
 */
      (__pyx_v_DIFF[(__pyx_v_ii + 3)]) = ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]));

      /* "hot.pyx":707
 * 
 *             DIFF[ii + 3] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 2]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 3);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])));

      /* "hot.pyx":708
 *             DIFF[ii + 3] = vec[i] - D.p.params[i][BN[i]]
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 1]
 *             DIFF[ii + 3] *= vec[i] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 * 
 *             # printf("\nupdating V_CACHE")
 */
      __pyx_t_3 = (__pyx_v_ii + 3);
      (__pyx_v_DIFF[__pyx_t_3]) = ((__pyx_v_DIFF[__pyx_t_3]) * ((__pyx_v_vec[__pyx_v_i]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":713
 * 
 * 
 *             V_CACHE[i] = vec[i]             # <<<<<<<<<<<<<<
 * 
 *             # if parallel == 31:
 */
      (__pyx_v_V_CACHE[__pyx_v_i]) = (__pyx_v_vec[__pyx_v_i]);

      /* "hot.pyx":690
 *         # printf("\nTry block 3: %d", <int>i)
 * 
 *         if V_CACHE[i] != vec[i] or update_baseNode[i] == 1:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 3: %d", <int>i)
 */
    }

    /* "hot.pyx":721
 *         #     printf("\nTry block 4: %d", <int>i)
 * 
 *         if update_baseNode[i] == 1:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 4: %d", <int>i)
 */
    __pyx_t_1 = (((__pyx_v_update_baseNode[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_1) {

      /* "hot.pyx":726
 *             # printf("i=%d, ", <int>i)
 *             # printf("D.p.params[i][BN[i]]: %.2e\n", D.p.params[i][BN[i]])
 *             CACHE = 1             # <<<<<<<<<<<<<<
 *             SPACE[ii] = 1.0 / (D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 1])
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 2]
 */
      __pyx_v_CACHE = 1;

      /* "hot.pyx":727
 *             # printf("D.p.params[i][BN[i]]: %.2e\n", D.p.params[i][BN[i]])
 *             CACHE = 1
 *             SPACE[ii] = 1.0 / (D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 1])             # <<<<<<<<<<<<<<
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 2]
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_SPACE[__pyx_v_ii]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])));

      /* "hot.pyx":728
 *             CACHE = 1
 *             SPACE[ii] = 1.0 / (D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 1])
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = __pyx_v_ii;
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":729
 *             SPACE[ii] = 1.0 / (D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 1])
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 2]
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             SPACE[ii + 1] = 1.0 / (D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i]])
 */
      __pyx_t_3 = __pyx_v_ii;
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":731
 *             SPACE[ii] /= D.p.params[i][BN[i]] - D.p.params[i][BN[i] + 3]
 * 
 *             SPACE[ii + 1] = 1.0 / (D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i]])             # <<<<<<<<<<<<<<
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 2]
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_SPACE[(__pyx_v_ii + 1)]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])])));

      /* "hot.pyx":732
 * 
 *             SPACE[ii + 1] = 1.0 / (D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i]])
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 1);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":733
 *             SPACE[ii + 1] = 1.0 / (D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i]])
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 2]
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             SPACE[ii + 2] = 1.0 / (D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i]])
 */
      __pyx_t_3 = (__pyx_v_ii + 1);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":735
 *             SPACE[ii + 1] /= D.p.params[i][BN[i] + 1] - D.p.params[i][BN[i] + 3]
 * 
 *             SPACE[ii + 2] = 1.0 / (D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i]])             # <<<<<<<<<<<<<<
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 1]
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 3]
 */
      (__pyx_v_SPACE[(__pyx_v_ii + 2)]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])])));

      /* "hot.pyx":736
 * 
 *             SPACE[ii + 2] = 1.0 / (D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i]])
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 3]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 2);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])));

      /* "hot.pyx":737
 *             SPACE[ii + 2] = 1.0 / (D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i]])
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 1]
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 3]             # <<<<<<<<<<<<<<
 * 
 *             SPACE[ii + 3] = 1.0 / (D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i]])
 */
      __pyx_t_3 = (__pyx_v_ii + 2);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)])));

      /* "hot.pyx":739
 *             SPACE[ii + 2] /= D.p.params[i][BN[i] + 2] - D.p.params[i][BN[i] + 3]
 * 
 *             SPACE[ii + 3] = 1.0 / (D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i]])             # <<<<<<<<<<<<<<
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 1]
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 2]
 */
      (__pyx_v_SPACE[(__pyx_v_ii + 3)]) = (1.0 / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)]) - ((__pyx_v_D->p->params[__pyx_v_i])[(__pyx_v_BN[__pyx_v_i])])));

      /* "hot.pyx":740
 * 
 *             SPACE[ii + 3] = 1.0 / (D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i]])
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 1]             # <<<<<<<<<<<<<<
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 2]
 * 
 */
      __pyx_t_3 = (__pyx_v_ii + 3);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 1)])));

      /* "hot.pyx":741
 *             SPACE[ii + 3] = 1.0 / (D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i]])
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 1]
 *             SPACE[ii + 3] /= D.p.params[i][BN[i] + 3] - D.p.params[i][BN[i] + 2]             # <<<<<<<<<<<<<<
 * 
 *             # if parallel == 31:
 */
      __pyx_t_3 = (__pyx_v_ii + 3);
      (__pyx_v_SPACE[__pyx_t_3]) = ((__pyx_v_SPACE[__pyx_t_3]) / (((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 3)]) - ((__pyx_v_D->p->params[__pyx_v_i])[((__pyx_v_BN[__pyx_v_i]) + 2)])));

      /* "hot.pyx":721
 *         #     printf("\nTry block 4: %d", <int>i)
 * 
 *         if update_baseNode[i] == 1:             # <<<<<<<<<<<<<<
 *             # if parallel == 31:
 *             # printf("\nExecute block 4: %d", <int>i)
 */
    }

    /* "hot.pyx":758
 *         # printf("SPACE[ii+3]: %.2e\n", SPACE[ii+3])
 * 
 *         i += 1             # <<<<<<<<<<<<<<
 * 
 *     # printf("Diagnostics: 2\n")
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "hot.pyx":771
 * 
 *     cdef size_t j, k, l, m, INDEX, II, JJ, KK, LL
 *     cdef double *address = NULL             # <<<<<<<<<<<<<<
 * 
 *     # (4) Here again, I need to iterate over an additional dimension.
 */
  __pyx_v_address = NULL;

  /* "hot.pyx":809
 *     # cdef double I2 = 0.0
 *     cdef int iterator
 *     cdef int iteration_size = 1024             # <<<<<<<<<<<<<<
 *     cdef double* temp2 = <double*>malloc(iteration_size * sizeof(double))
 *     # cdef double* INDEX = <double*>malloc(iteration_size * sizeof(double))
 */
  __pyx_v_iteration_size = 0x400;

  /* "hot.pyx":810
 *     cdef int iterator
 *     cdef int iteration_size = 1024
 *     cdef double* temp2 = <double*>malloc(iteration_size * sizeof(double))             # <<<<<<<<<<<<<<
 *     # cdef double* INDEX = <double*>malloc(iteration_size * sizeof(double))
 * 
 */
  __pyx_v_temp2 = ((double *)malloc((__pyx_v_iteration_size * (sizeof(double)))));

  /* "hot.pyx":815
 *     # clock_gettime(CLOCK_REALTIME, &ts)
 *     # printf('here is new eval_hot().\n')
 *     for iterator in range(iteration_size):             # <<<<<<<<<<<<<<
 *         # printf("i:%lu, ",i)
 *         m = iterator % 4
 */
  __pyx_t_4 = __pyx_v_iteration_size;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_iterator = __pyx_t_6;

    /* "hot.pyx":817
 *     for iterator in range(iteration_size):
 *         # printf("i:%lu, ",i)
 *         m = iterator % 4             # <<<<<<<<<<<<<<
 *         l = iterator / 4 % 4
 *         k = iterator / 16 % 4
 */
    __pyx_v_m = (__pyx_v_iterator % 4);

    /* "hot.pyx":818
 *         # printf("i:%lu, ",i)
 *         m = iterator % 4
 *         l = iterator / 4 % 4             # <<<<<<<<<<<<<<
 *         k = iterator / 16 % 4
 *         j = iterator / 64 % 4
 */
    __pyx_v_l = ((__pyx_v_iterator / 4) % 4);

    /* "hot.pyx":819
 *         m = iterator % 4
 *         l = iterator / 4 % 4
 *         k = iterator / 16 % 4             # <<<<<<<<<<<<<<
 *         j = iterator / 64 % 4
 *         i = iterator / 256 % 4
 */
    __pyx_v_k = ((__pyx_v_iterator / 16) % 4);

    /* "hot.pyx":820
 *         l = iterator / 4 % 4
 *         k = iterator / 16 % 4
 *         j = iterator / 64 % 4             # <<<<<<<<<<<<<<
 *         i = iterator / 256 % 4
 * 
 */
    __pyx_v_j = ((__pyx_v_iterator / 64) % 4);

    /* "hot.pyx":821
 *         k = iterator / 16 % 4
 *         j = iterator / 64 % 4
 *         i = iterator / 256 % 4             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = ((__pyx_v_iterator / 0x100) % 4);

    /* "hot.pyx":824
 * 
 * 
 *         address = D.p.I + (BN[0] + i) * D.p.S[0] + (BN[1] + j) * D.p.S[1] + (BN[2] + k) * D.p.S[2] + (BN[3] + l) * D.p.S[3] + BN[4] + m             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_address = ((((((__pyx_v_D->p->I + (((__pyx_v_BN[0]) + __pyx_v_i) * (__pyx_v_D->p->S[0]))) + (((__pyx_v_BN[1]) + __pyx_v_j) * (__pyx_v_D->p->S[1]))) + (((__pyx_v_BN[2]) + __pyx_v_k) * (__pyx_v_D->p->S[2]))) + (((__pyx_v_BN[3]) + __pyx_v_l) * (__pyx_v_D->p->S[3]))) + (__pyx_v_BN[4])) + __pyx_v_m);
  }

  /* "hot.pyx":836
 *     # printf("new eval_hot() for loops 2 takes %ld ns\n",t_elapsed)
 *     # clock_gettime(CLOCK_REALTIME, &ts)
 *     for iterator in range(iteration_size):             # <<<<<<<<<<<<<<
 *         # printf("i:%lu, ",i)
 *         m = iterator % 4
 */
  __pyx_t_4 = __pyx_v_iteration_size;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_iterator = __pyx_t_6;

    /* "hot.pyx":838
 *     for iterator in range(iteration_size):
 *         # printf("i:%lu, ",i)
 *         m = iterator % 4             # <<<<<<<<<<<<<<
 *         l = iterator / 4 % 4
 *         k = iterator / 16 % 4
 */
    __pyx_v_m = (__pyx_v_iterator % 4);

    /* "hot.pyx":839
 *         # printf("i:%lu, ",i)
 *         m = iterator % 4
 *         l = iterator / 4 % 4             # <<<<<<<<<<<<<<
 *         k = iterator / 16 % 4
 *         j = iterator / 64 % 4
 */
    __pyx_v_l = ((__pyx_v_iterator / 4) % 4);

    /* "hot.pyx":840
 *         m = iterator % 4
 *         l = iterator / 4 % 4
 *         k = iterator / 16 % 4             # <<<<<<<<<<<<<<
 *         j = iterator / 64 % 4
 *         i = iterator / 256 % 4
 */
    __pyx_v_k = ((__pyx_v_iterator / 16) % 4);

    /* "hot.pyx":841
 *         l = iterator / 4 % 4
 *         k = iterator / 16 % 4
 *         j = iterator / 64 % 4             # <<<<<<<<<<<<<<
 *         i = iterator / 256 % 4
 * 
 */
    __pyx_v_j = ((__pyx_v_iterator / 64) % 4);

    /* "hot.pyx":842
 *         k = iterator / 16 % 4
 *         j = iterator / 64 % 4
 *         i = iterator / 256 % 4             # <<<<<<<<<<<<<<
 * 
 *         temp2[iterator] = DIFF[i] * DIFF[4 + j] * DIFF[8 + k] * DIFF[12 + l] * DIFF[16 + m] * SPACE[i] * SPACE[4 + j] * SPACE[8 + k] * SPACE[12 + l] * SPACE[16 + m]
 */
    __pyx_v_i = ((__pyx_v_iterator / 0x100) % 4);

    /* "hot.pyx":844
 *         i = iterator / 256 % 4
 * 
 *         temp2[iterator] = DIFF[i] * DIFF[4 + j] * DIFF[8 + k] * DIFF[12 + l] * DIFF[16 + m] * SPACE[i] * SPACE[4 + j] * SPACE[8 + k] * SPACE[12 + l] * SPACE[16 + m]             # <<<<<<<<<<<<<<
 *         # INDEX = i * D.p.BLOCKS[0] + j * D.p.BLOCKS[1] + k * D.p.BLOCKS[2] + l * D.p.BLOCKS[3] + m
 *         # printf('INDEX: %lu\n', INDEX)
 */
    (__pyx_v_temp2[__pyx_v_iterator]) = ((((((((((__pyx_v_DIFF[__pyx_v_i]) * (__pyx_v_DIFF[(4 + __pyx_v_j)])) * (__pyx_v_DIFF[(8 + __pyx_v_k)])) * (__pyx_v_DIFF[(12 + __pyx_v_l)])) * (__pyx_v_DIFF[(16 + __pyx_v_m)])) * (__pyx_v_SPACE[__pyx_v_i])) * (__pyx_v_SPACE[(4 + __pyx_v_j)])) * (__pyx_v_SPACE[(8 + __pyx_v_k)])) * (__pyx_v_SPACE[(12 + __pyx_v_l)])) * (__pyx_v_SPACE[(16 + __pyx_v_m)]));

    /* "hot.pyx":861
 *     #     i = iterator / 256 % 4
 * 
 *         if CACHE == 1:             # <<<<<<<<<<<<<<
 *             # printf('replace %f ',I_CACHE[INDEX])
 *             # printf('with %f\n', address[0])
 */
    __pyx_t_1 = ((__pyx_v_CACHE == 1) != 0);
    if (__pyx_t_1) {

      /* "hot.pyx":864
 *             # printf('replace %f ',I_CACHE[INDEX])
 *             # printf('with %f\n', address[0])
 *             I_CACHE[iterator] = address[0]             # <<<<<<<<<<<<<<
 *         # printf('%f\n', I2)
 *         I += temp2[iterator] *  I_CACHE[iterator]
 */
      (__pyx_v_I_CACHE[__pyx_v_iterator]) = (__pyx_v_address[0]);

      /* "hot.pyx":861
 *     #     i = iterator / 256 % 4
 * 
 *         if CACHE == 1:             # <<<<<<<<<<<<<<
 *             # printf('replace %f ',I_CACHE[INDEX])
 *             # printf('with %f\n', address[0])
 */
    }

    /* "hot.pyx":866
 *             I_CACHE[iterator] = address[0]
 *         # printf('%f\n', I2)
 *         I += temp2[iterator] *  I_CACHE[iterator]             # <<<<<<<<<<<<<<
 *         # I2 += temp *  I_CACHE[iterator]
 *         # printf('I2: %f\n',I2)
 */
    __pyx_v_I = (__pyx_v_I + ((__pyx_v_temp2[__pyx_v_iterator]) * (__pyx_v_I_CACHE[__pyx_v_iterator])));
  }

  /* "hot.pyx":875
 * 
 * 
 *     free(temp2)             # <<<<<<<<<<<<<<
 * 
 *     if I < 0.0:
 */
  free(__pyx_v_temp2);

  /* "hot.pyx":877
 *     free(temp2)
 * 
 *     if I < 0.0:             # <<<<<<<<<<<<<<
 *          return 0.0
 * 
 */
  __pyx_t_1 = ((__pyx_v_I < 0.0) != 0);
  if (__pyx_t_1) {

    /* "hot.pyx":878
 * 
 *     if I < 0.0:
 *          return 0.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0.0;
    goto __pyx_L0;

    /* "hot.pyx":877
 *     free(temp2)
 * 
 *     if I < 0.0:             # <<<<<<<<<<<<<<
 *          return 0.0
 * 
 */
  }

  /* "hot.pyx":943
 * 
 * 
 *     return I             # <<<<<<<<<<<<<<
 * 
 * cdef double eval_hot_norm() nogil:
 */
  __pyx_r = __pyx_v_I;
  goto __pyx_L0;

  /* "hot.pyx":555
 * 
 * 
 * cdef double eval_hot_faster(size_t THREAD,             # <<<<<<<<<<<<<<
 *                       double E,
 *                       double mu,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "hot.pyx":945
 *     return I
 * 
 * cdef double eval_hot_norm() nogil:             # <<<<<<<<<<<<<<
 *     # Source radiation field normalisation which is independent of the
 *     # parameters of the parametrised model -- i.e. cell properties, energy,
 */

static double __pyx_f_3hot_eval_hot_norm(void) {
  double __pyx_r;

  /* "hot.pyx":953
 *     # The units of the specific intensity need to be J/cm^2/s/keV/steradian.
 * 
 *     return erg / 4.135667662e-18             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_3hot_erg / 4.135667662e-18);
  goto __pyx_L0;

  /* "hot.pyx":945
 *     return I
 * 
 * cdef double eval_hot_norm() nogil:             # <<<<<<<<<<<<<<
 *     # Source radiation field normalisation which is independent of the
 *     # parameters of the parametrised model -- i.e. cell properties, energy,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_hot(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_hot},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "hot",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_k_B, __pyx_k_k_B, sizeof(__pyx_k_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_keV, __pyx_k_keV, sizeof(__pyx_k_keV), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_xpsi_global_imports, __pyx_k_xpsi_global_imports, sizeof(__pyx_k_xpsi_global_imports), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 94, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("eval_hot", (void (*)(void))__pyx_f_3hot_eval_hot, "double (size_t, double, double, double, double, double, void *const )") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("eval_hot_norm", (void (*)(void))__pyx_f_3hot_eval_hot_norm, "double (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("init_hot", (void (*)(void))__pyx_f_3hot_init_hot, "void *(size_t, __pyx_t_7preload__preloaded const *const )") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("free_hot", (void (*)(void))__pyx_f_3hot_free_hot, "int (size_t, void *const )") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("eval_hot_faster", (void (*)(void))__pyx_f_3hot_eval_hot_faster, "double (size_t, double, double, double, double, double, void *const )") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inithot(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inithot(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_hot(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_hot(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_hot(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_hot(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("hot", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_hot) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "hot")) {
      if (unlikely(PyDict_SetItemString(modules, "hot", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "hot.pyx":15
 * from posix.time cimport clock_gettime, timespec, CLOCK_REALTIME
 * 
 * from xpsi.global_imports import _keV, _k_B             # <<<<<<<<<<<<<<
 * 
 * cdef int SUCCESS = 0
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_keV);
  __Pyx_GIVEREF(__pyx_n_s_keV);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_keV);
  __Pyx_INCREF(__pyx_n_s_k_B);
  __Pyx_GIVEREF(__pyx_n_s_k_B);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_k_B);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_xpsi_global_imports, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_keV); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_keV, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_k_B); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_k_B, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hot.pyx":17
 * from xpsi.global_imports import _keV, _k_B
 * 
 * cdef int SUCCESS = 0             # <<<<<<<<<<<<<<
 * cdef int ERROR = 1
 * 
 */
  __pyx_v_3hot_SUCCESS = 0;

  /* "hot.pyx":18
 * 
 * cdef int SUCCESS = 0
 * cdef int ERROR = 1             # <<<<<<<<<<<<<<
 * 
 * cdef double erg = 1.0e-7
 */
  __pyx_v_3hot_ERROR = 1;

  /* "hot.pyx":20
 * cdef int ERROR = 1
 * 
 * cdef double erg = 1.0e-7             # <<<<<<<<<<<<<<
 * cdef double k_B = _k_B
 * cdef double keV = _keV
 */
  __pyx_v_3hot_erg = 1.0e-7;

  /* "hot.pyx":21
 * 
 * cdef double erg = 1.0e-7
 * cdef double k_B = _k_B             # <<<<<<<<<<<<<<
 * cdef double keV = _keV
 * cdef double k_B_over_keV = k_B / keV
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_k_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_3hot_k_B = __pyx_t_3;

  /* "hot.pyx":22
 * cdef double erg = 1.0e-7
 * cdef double k_B = _k_B
 * cdef double keV = _keV             # <<<<<<<<<<<<<<
 * cdef double k_B_over_keV = k_B / keV
 * cdef int VERBOSE = 0
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_keV); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_3hot_keV = __pyx_t_3;

  /* "hot.pyx":23
 * cdef double k_B = _k_B
 * cdef double keV = _keV
 * cdef double k_B_over_keV = k_B / keV             # <<<<<<<<<<<<<<
 * cdef int VERBOSE = 0
 * 
 */
  __pyx_v_3hot_k_B_over_keV = (__pyx_v_3hot_k_B / __pyx_v_3hot_keV);

  /* "hot.pyx":24
 * cdef double keV = _keV
 * cdef double k_B_over_keV = k_B / keV
 * cdef int VERBOSE = 0             # <<<<<<<<<<<<<<
 * 
 * ctypedef struct ACCELERATE:
 */
  __pyx_v_3hot_VERBOSE = 0;

  /* "hot.pyx":1
 * #cython: cdivision=True             # <<<<<<<<<<<<<<
 * #cython: boundscheck=False
 * #cython: nonecheck=False
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init hot", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init hot");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
    static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
